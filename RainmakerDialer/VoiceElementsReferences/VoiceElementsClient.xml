<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VoiceElementsClient</name>
    </assembly>
    <members>
        <member name="T:VoiceElements.Client.ConferenceChangedEventArgs">
            <summary>
            Event Args for the Conference Changed Event
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ConferenceChangedEventArgs.Conference">
            <summary>
            The Conference associated with the event.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.ConferenceChanged">
            <summary>
            A delegate for the Conference Changed Event
            </summary>
            <param name="ccea"></param>
        </member>
        <member name="T:VoiceElements.Client.Conference">
            <summary>
            Represents a conference.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.ClientObject">
            <summary>
            The Base Class From Which All Voice Elements Client Objects Derive
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.HexDump(System.Byte[])">
            <summary>
            Dumps a byte array to the log.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.Finalize">
            <summary>
            Finalizer for the Client Object.  Called Automatically by the GC.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.Dispose">
            <summary>
            Used to dispose of this object.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.Release">
            <summary>
            Releases the object and all of its resources.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.Dispose(System.Boolean)">
            <summary>
            Completes the disposing process.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.IsClientConnected">
            <summary>
            Returns the status of the client connection.
            </summary>
            <returns>True if client object is connected.</returns>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.WaitForConnection">
            <summary>
            Waits up to 15 seconds for a connection to be established.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.LinkUp">
            <summary>
            Sets the status of the Link to Up.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.LinkDown">
            <summary>
            Sets the status of the Link to Down.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            Processes Commands Sent From the Server
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.ClientObject.Debug(System.String)">
            <summary>
            Allows client to log a debug message at the server for diagnostic use.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.UseIpcElements">
            <summary>
            Use IpcElements for connections to the server.  Once set to true, you cannot reset without restarting your application.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.TelephonyLinkInfo">
            <summary>
            Returns a TelephonyLinkInfo object for this Client Object
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.TelephonyLink">
            <summary>
            Returns the TelephonyLink object for this Client Object
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.TelephonyServer">
            <summary>
            A reference the the TelephonyServer that this object is assigned to.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.Connected">
            <summary>
            A MRE that synchronizes calls to the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.LastConnectionException">
            <summary>
            Provides an instance of the most recent connection exception that occured for this object.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.Log">
            <summary>
            Provides the Log for this object.  If one is not assigned, this function returns it's TelephonyServer Log.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ClientObject.IsDisposed">
            <summary>
            Returns true if the object has been disposed.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.Conference.Add(VoiceElements.Client.RoutableResource)">
            <summary>
            Adds a Channel or Voice Resource to the conference.
            </summary>
            <param name="routableResource">The routable resource to add.</param>
        </member>
        <member name="M:VoiceElements.Client.Conference.Remove(VoiceElements.Client.RoutableResource)">
            <summary>
            Removes a Channel or Voice Resource from the conference.  This is also used to remove monitors from the conference.
            </summary>
            <param name="routableResource">This is a reference to the the routable resource object you would like to remove from the conference. 
            </param>
        </member>
        <member name="M:VoiceElements.Client.Conference.RemoveOnDisconnect(VoiceElements.Client.RoutableResource)">
            <summary>
            Removes the resource via a client disconnect event.  
            This will not call back to the server since the server notified us and has already cleaned up its side.
            This will fire a ConferenceChanged event.
            </summary>
            <param name="routableResource">This is a reference to the the routable resource object you would like to remove from the conference. 
            </param>
        </member>
        <member name="M:VoiceElements.Client.Conference.Monitor(VoiceElements.Client.RoutableResource)">
            <summary>
            Causes a Channel or Voice Resource to monitor the conference.
            </summary>
            <param name="routableResource"></param>
        </member>
        <member name="M:VoiceElements.Client.Conference.Dispose(System.Boolean)">
            <summary>
            Dispises the Conference.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:VoiceElements.Client.Conference.ConferenceChanged">
            <summary>
            An event that is fired when the conference participants or monitors change.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Conference.ConferenceName">
            <summary>
            The name of the conference assigned by the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Conference.ConferenceNotifyMode">
            <summary>
            Sets the notify mode for the conference.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Conference.ActiveTalkers">
            <summary>
            Gets a List of Active Talkers in the conference.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Conference.Participants">
            <summary>
            Returns the list of Particpants in this conference.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Conference.Monitors">
            <summary>
            Returns the list of Monitors in this conference.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.RoutableResource">
            <summary>
            Represents any resource that can be routed to aother resource.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.RouteFull(VoiceElements.Client.RoutableResource)">
             <summary>
                Completes a full route between two resources.  Both channels then list to each other.
            </summary>
             <param name="routableResource">
                <para>Routable Resource</para>
                This is the <see cref="T:VoiceElements.Client.RoutableResource">Routable Resource</see> to which you would like to route.  Since you are calling this as a method on a resource, 
                thst provides the first resource.
            </param>
             <exception cref="T:System.Exception"></exception>
             <remarks>
                 The RouteFull method routes the transmit timeslots of both resources together.  This will allow a routable resource
                 to listen to another resource.  It will also allow the other resource to listen to the first resource.  This is ideal 
                 for calling card applications.<para></para>
                 <strong>Routing Resources</strong><para></para>
                 Routing resources is very powerful. It allows a resource to listen to another. If, for example you wanted
                 to create a call center application, you would need to route the inbound caller in such a way that the call center agent
                 would be able to speak to the caller.  The full route allows you to do just this.
                 <br></br>
                 <strong>RouteFull vs Route Half</strong><para></para>
                 A full route allows both parties to listen to each other, while a <see cref="M:VoiceElements.Client.RoutableResource.RouteHalf">Route Half</see> will allow one party to listen to the other.
             </remarks>
             <example>
             The example below shows how to route two resources together and make an outbound call.  This example shows an
             m_ChannelResource is the inbound resource, while m_OutboundChannelResource is a reference to the outbound channel.
                <code lang="cs"> 
                         class TestClass
                         {
                             public CallingCard(TelephonyServer telephonyServer, ChannelResource channelResource)
                             {
                                 m_TelephonyServer = telephonyServer;
                                 m_ChannelResource = channelResource;
             
                                 // Use this member variable to reference the supplied voice resource object easier in the script.
                                 m_VoiceResource = channelResource.VoiceResource;
             
                                 m_VoiceResource.Codec = Codec.MULAW_8Khz_8Bit;
                             }
                             
                             private ManualResetEvent m_TerminateCall = new ManualResetEvent(false);
                             
                             // A reference to the outbound channel resource
                             private ChannelResource m_OutboundChannelResource;
             
                             // A reference to the voice resource
                             private VoiceResource m_OutboundVoiceResource;
                             
                             // A reference to the Channel Resource the call arrived on
                             private ChannelResource m_ChannelResource;
             
                             // A reference to the voice resource assigned to the call
                             private VoiceResource = m_VoiceResource;
             
                             // A reference to the application log
                             private static Log Log = Sampler.Log;
             
                             // A reference to your Telephony Server Connection
                             private TelephonyServer m_TelephonyServer;
                             
                             public void RoutedDialOut()
                             {
                                 try
                                 {
                                     // Now Get a New Outbound Channel
                                     m_OutboundChannelResource = m_TelephonyServer.GetChannel();
             
                                     // Subscribe to the disconnect event.
                                     m_OutboundChannelResource.Disconnected += new Disconnected(OutboundChannelResource_Disconnected);
                                     
                                     // Set the reference to the outbound channel's voice resource
                                     m_OutboundVoiceResource = m_OutboundChannelResource.VoiceResource;
            
                                     // Route early so we can listen to the dialing...
                                     m_ChannelResource.RouteFull(m_OutboundChannelResource);
            
                                     // Log Often
                                     Log.Write("Dialing {0}", m_VoiceResource.DigitBuffer);
            
                                     // Place the call
                                     DialResult dr = m_OutboundChannelResource.Dial(m_VoiceResource.DigitBuffer);
                                 
                                     // Log Often
                                     Log.Write("The dial result for {0} was: {1}", m_VoiceResource.DigitBuffer, dr);
                                     
                                     // Wait until we call set on m_TerminateCall to finish this method
                                     // We call this when the outbound channel hangs up
                                     m_TerminateCall.WaitOne();
                                 }
                                 catch(ElementsException ex)
                                 {
             
                                     if (ee is HangupException)
                                     {   
                                         Log.Write("The Caller Hungup!");
                                     }
                                     else
                                     {
                                         Log.WriteException(ee, "Script Elements Exception");
                                     }
                                 }
                                 finally
                                 {
                                     // Route 1st Channel Back To its Voice Resource
                                     m_ChannelResource.RouteFull(m_VoiceResource);
            
                                     // Route 2nd Channel Back To its Voice Resource
                                     m_OutboundChannelResource.RouteFull(m_OutboundVoiceResource);
             
                                     try
                                     {
                                         // Disconnect the call (I.E. Hangup)
                                         m_OutboundChannelResource.Disconnect();
                                     }
                                     catch(Exception ex)
                                     {
                                         Log.WriteException(ex, "Error hanging up on outbound resource");
                                     }
                                 }
                             }
                             
                             void OutboundChannelResource_Disconnected(object sender, DisconnectedEventArgs e)
                              {
                                 //Here we will simply write to the log that the caller hung up the phone.
                                 Log.Write("Disconnected Event Received");
             
                                 // Signal that the RoutedDialOut method can terminate
                                 m_TerminateCall.Set();
                              }
                         }
                </code>
            </example>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.RouteFull(VoiceElements.Interface.TelephonyLinkInfo)">
            <summary>
            Completes a full route between two resources.  Both channels then list to each other.
            </summary>
            <param name="telephonyLinkInfo"></param>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.StopListening">
            <summary>
            Causes this resource to stop listening to all other resources.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.RouteHalf(VoiceElements.Client.RoutableResource)">
            <summary>
            Performs a half route
            </summary>
            <param name="routableResource">A reference to the other routable resource to which you would like to half route.</param>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.RouteHalf(VoiceElements.Interface.TelephonyLinkInfo)">
            <summary>
            Performs a half route
            </summary>
            <param name="telephonyLinkInfo">A reference to the other routable resource to which you would like to half route.</param>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.StopAllListeners">
            <summary>
            Forces all listenters to stop listening to us
            </summary>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.StopListener(VoiceElements.Client.RoutableResource)">
            <summary>
            Stops specific resource from listening to us.
            </summary>
            <param name="routableResource"></param>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.DumpRoutingInfo">
            <summary>
            Dumps all routing information for this resource to the log.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.RoutableResource.PropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property of an monitored object changes.
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
        </member>
        <member name="P:VoiceElements.Client.RoutableResource.Listeners">
            <summary>
            Who is listening to our time slot.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.RoutableResource.ListentingTo">
            <summary>
            Who we are listening to.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.RoutableResource.DeviceName">
            <summary>
            The name of this device on the Server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.RoutableResource.ConferenceAttributes">
            <summary>
            The conference attributes of this resource.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.RoutableResource.Conference">
            <summary>
            The Conference this resource is a member of.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.TelephonyServer">
            <summary>
            This is the primary class providing the available methods and properties exposed by the Voice Elements server
            hosting the telephony resources.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.TelephonyServer.StaticLog">
            <summary>
            A reference to the static Log for the telephony server calls.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.StartDialer">
            <summary>
            Starts the Dialer
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.StopDialer">
            <summary>
            Stops the Dialer
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.#ctor">
            <summary>
            This constructor with no parameters is only used internally.  Use the 3 parameter overload.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.#ctor(System.String,System.String,System.String)">
             <summary>
             Establishes a connection to the telephony server and instantiates the core object to use its telephony resources.
             </summary>
             <param name="url">
             String specifying the network location of the Voice Elements Server.<para></para>
             Note: this string may be a DNS server name to be resolved or a raw IP address and port.  See remarks below for more information
             on connecting to your server.
             </param>
             <param name="username">
             A string specifying the username for authenticating with the Voice Elements server.</param>
             <param name="password">
             A string specifying the password for authenticating with the Voice Elements server.</param>
             /// <exception cref="T:VoiceElements.Common.ElementsException"> Thrown when the client cannot connect to the server.</exception>
             <remarks>
             <strong>Server Connection </strong><para></para>
             The server may be specified by a LAN DNS entry, internet url or a specific IP address.  If the server is running on the same machine
             as your client, your may reference it by "localhost:{port}" or by the local ip of "127.0.0.1:{port}".  Voice Elements defaults the port setting
             to port 54331.  For more information on changing these settings on the server, see 
             <see href="http://support.inventivelabs.com/index.php?title=Configuring_Server_General_Application_Behavior">Configuring VE Server General Behavior</see>.
             </remarks>
             <example>
            This sample resolves the IP of the server from a DNS address, instantiates a TelephonyServer connection named "s_TelephonyServer"
             and then writes out its url property to a console line.
                 <code lang="cs">
                 public void ConnectToMyTelephonyServer()
                 {
                     // Resolve DNS to a system IP address from My.VoiceElemnts.Server
                     System.Net.IPAddress[] ips = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server");
            
                    //  Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                    string sIpaddress = @"gtcp://" + ips[0].ToString() + ":54331";
            
                    // Create the telephony server object that will be the base class for all telephony operations.
                    s_TelephonyServer = new TelephonyServer(sIpaddress, "MyUserName", "MyPassword");
             
                    Console.WriteLine("Connected to server at " + s_TelephonyServer.Url.ToString());
                 }
                 </code>
             </example>
             <seealso href="http://support.inventivelabs.com/index.php?title=Configuring_Server_General_Application_Behavior">Configuring VE Server General Behavior</seealso> 
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.#ctor(VoiceElements.Client.TelephonyServerLogin)">
            <summary>
            Creates a telephony server using the supplied TelephonyServerLogin class
            </summary>
            <param name="telephonyServerLogin"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.#ctor(VoiceElements.Client.TelephonyServerLogin[])">
            <summary>
            Creates a telephony server using the supplied array of TelephonyServerLogins
            </summary>
            <param name="telephonyServerLogins"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.ActiveTelephonyServerLogin">
            <summary>
            Returns the TelephonyServerLogin object of the currently connected telephony server.  If there is no active connection this returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.Exiting">
            <summary>
            Signals the system that you are about to exit the application.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.Dispose(System.Boolean)">
            <summary>
            This method disposes of the telephony server object and client objects.  This should be used to guarantee a clean shutdown.
            </summary>
            <param name="disposing">This parameter should usually be set as true. It insures the internal disposal of licensing objects.</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            This internal method processes command events from the server.
            </summary>
            <param name="command">The server passes the command type through this parameter.</param>
            <returns>New call event, stream event or asynch complete of VPacket type.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.SetSingleClientMode">
            <summary>
            On dedicated systems, sets the Telephony Server to single client only mode.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">
             <summary>
             Registers all inbound DNIS's. The VE Server will then send all inbound calls to this application, raising new call events.  
             </summary>
             <remarks>
             Once DNIS's have been registered, the Telephony Server will take any inbound calls received for that exact <see href="http://en.wikipedia.org/wiki/DNIS">DNIS</see> string and raise a 
             <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call</see> event.  When that event is received, it is recommended you create 
             a separate class to run a script that comprises your voice interface.  The script will execute <see cref="M:VoiceElements.Client.VoiceResource.Play">Plays</see>,
             <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> from callers and any other functions of your application.
             <para></para>
             You may need to contact your voice carrier or run some test calls to determine the exact length and content of the DNIS's coming into your system if you intend to register specific ones. 
             <para></para>
             <strong>Retrieving the DNIS in Your Code</strong><br></br>
             To retreive the DNIS for use in your application any time suring the lifetime of the call raised by the event, use the <see cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</see> 
             to your user account on the server.<para></para>
             There are two ways to <see href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">deploy</see> your application.
             <para></para>
             <strong>Using Inventive Labs Telephony Bank</strong><br></br>
             When using the Inventive Labs <see href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</see>, this method will only register the DNIS's which have been assigned 
             to your user account on the server.<para></para>
             <strong>Using Your Dedicated Server</strong><br></br>
             When using your own dedicated <see href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</see>, this method will result in all inbound DNIS's being routed to the client 
             application that registers.
             </remarks>
             <example>
            This sample resolves the IP of the server from a DNS address, instantiates a TelephonyServer connection named "s_TelephonyServer"
             and then registers all DNIS's for inbound call events.
                 <code lang="cs">
                 public void ConnectToMyTelephonyServer()
                 {
                     // Resolve DNS to a system IP address from My.VoiceElemnts.Server
                     System.Net.IPAddress[] ips = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server");
            
                    //  Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                    string sIpaddress = @"gtcp://" + ips[0].ToString() + ":54331";
            
                    // Create the telephony server object that will be the base class for all telephony operations.
                    s_TelephonyServer = new TelephonyServer(sIpaddress, "MyUserName", "MyPassword");
             
                    // Using no parameters registers ALL inbound calls received by the server to this application.
                    s_TelephonyServer.RegisterDNIS();
                 }
                 </code>
                 <code lang="VB">
                 Class MyTelephonyClass
                     Public Sub ConnectToMyTelephonyServer()
                         ' Resolve DNS to a system IP address from My.VoiceElemnts.Server
                         Dim ips As System.Net.IPAddress() = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server")
                    
                         ' Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                         Dim sIpaddress As String = "gtcp://" + ips(0).ToString() + ":54331"
                    
                         ' Create the telephony server object that will be the base class for all telephony operations.
                         Dim s_TelephonyServer As New VoiceElements.Client.TelephonyServer(sIpaddress, "MyUserName", "MyPassword")
             
                         ' Using no parameters registers ALL inbound calls received by the server to this application.
                         s_TelephonyServer.RegisterDNIS()
                     End Sub
                 End Class
                 </code>
             </example>
             <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
             <seealso cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</seealso>
             <seealso href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</seealso>
             <seealso href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">Deploying your Application</seealso> 
             <seealso href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</seealso>
             <seealso href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</seealso>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RegisterDNIS(System.String)">
             <summary>
             Registers a specific inbound DNIS. The VE Server will then send all inbound calls for that DNIS to this application, raising new call events.  
             </summary>
             <param name="dnis">This is an exact string of the <see href="http://en.wikipedia.org/wiki/DNIS">DNIS</see> you would like to register. 
             You may need to contact your voice carrier or run some test calls to determine the exact length and content of the DNIS's coming into your system to ensure you register them correctly.</param>
             <remarks>
             Once DNIS's have been registered, the Telephony Server will take any inbound calls received for that exact <see href="http://en.wikipedia.org/wiki/DNIS">DNIS</see> string and raise a 
             <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call</see> event.  When that event is received, it is recommended you create 
             a separate class to run a script that comprises your voice interface.  The script will execute <see cref="M:VoiceElements.Client.VoiceResource.Play">Plays</see>,
             <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> from callers and any other functions of your application.
             <para></para>
             <strong>Retrieving the DNIS in Your Code</strong><br></br>
             To retreive the DNIS for use in your application any time suring the lifetime of the call raised by the event, use the <see cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</see> 
             to your user account on the server.<para></para>
             There are two ways to <see href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">deploy</see> your application.
             <para></para>
             <strong>Using Inventive Labs Telephony Bank</strong><br></br>
             When using the Inventive Labs <see href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</see>, this method will only register the DNIS's which have been assigned 
             to your user account on the server.<para></para>
             <strong>Using Your Dedicated Server</strong><br></br>
             When using your own dedicated <see href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</see>, this method will result in all inbound DNIS's being routed to the client 
             application that registers.
             </remarks>
             <example>
            This sample resolves the IP of the server from a DNS address, instantiates a TelephonyServer connection named "s_TelephonyServer"
             and then registers a DNIS of "8675309" for inbound call events.
                 <code lang="cs">
                 public void ConnectToMyTelephonyServer()
                 {
                     // Resolve DNS to a system IP address from My.VoiceElemnts.Server
                     System.Net.IPAddress[] ips = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server");
            
                    //  Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                    string sIpaddress = @"gtcp://" + ips[0].ToString() + ":54331";
            
                    // Create the telephony server object that will be the base class for all telephony operations.
                    s_TelephonyServer = new TelephonyServer(sIpaddress, "MyUserName", "MyPassword");
             
                    // Using a single string parameter registers all calls that come in for that number.
                    // In this case, we are reigstering '8675309'
                    s_TelephonyServer.RegisterDNIS("8675309");
                 }
                 </code>
                 <code lang="VB">
                 Class MyTelephonyClass
                     Public Sub ConnectToMyTelephonyServer()
                         ' Resolve DNS to a system IP address from My.VoiceElemnts.Server
                         Dim ips As System.Net.IPAddress() = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server")
                    
                         ' Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                         Dim sIpaddress As String = "gtcp://" + ips(0).ToString() + ":54331"
                    
                         ' Create the telephony server object that will be the base class for all telephony operations.
                         Dim s_TelephonyServer As New VoiceElements.Client.TelephonyServer(sIpaddress, "MyUserName", "MyPassword")
             
                         ' Using a single string parameter registers all calls that come in for that number.
                         ' In this case, we are reigstering '8675309'
                         s_TelephonyServer.RegisterDNIS("8675309")
                     End Sub
                 End Class
                 </code>
             </example>
             <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
             <seealso cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</seealso>
             <seealso href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</seealso>
             <seealso href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">Deploying your Application</seealso> 
             <seealso href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</seealso>
             <seealso href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</seealso>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RegisterDNIS(System.String[])">
             <summary>
             Registers an array of specific DNIS's. The VE Server will then send all inbound calls for every DNIS in the array to this application, raising new call events.  
             </summary>
             <param name="dnisArray">This is an array of exact strings of the <see href="http://en.wikipedia.org/wiki/DNIS">DNIS's</see> you would like to register. 
             You may need to contact your voice carrier or run some test calls to determine the exact length and content of the DNIS's coming into your system to ensure you register them correctly.</param>
             <remarks>
             Once DNIS's have been registered, the Telephony Server will take any inbound calls received for any exact <see href="http://en.wikipedia.org/wiki/DNIS">DNIS</see> string in the array passed and raise a 
             <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call</see> event.  When that event is received, it is recommended you create 
             a separate class to run a script that comprises your voice interface.  The script will execute <see cref="M:VoiceElements.Client.VoiceResource.Play">Plays</see>,
             <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> from callers and any other functions of your application.
             <para></para>
             <strong>Retrieving the DNIS in Your Code</strong><br></br>
             To retreive the DNIS for use in your application any time suring the lifetime of the call raised by the event, use the <see cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</see> 
             to your user account on the server.<para></para>
             There are two ways to <see href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">deploy</see> your application.
             <para></para>
             <strong>Using Inventive Labs Telephony Bank</strong><br></br>
             When using the Inventive Labs <see href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</see>, this method will only register the DNIS's which have been assigned 
             to your user account on the server.<para></para>
             <strong>Using Your Dedicated Server</strong><br></br>
             When using your own dedicated <see href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</see>, this method will result in all inbound DNIS's being routed to the client 
             application that registers.
             </remarks>
             <example>
            This sample resolves the IP of the server from a DNS address, instantiates a TelephonyServer connection named "s_TelephonyServer"
            , builds an array called 'myDNISArray' and populates it with some numbers and then registers the entire array.
                 <code lang="cs">
                 class MyTelephonyClass
                 {
                     public void ConnectToMyTelephonyServer()
                     {
                         // Resolve DNS to a system IP address from My.VoiceElemnts.Server
                         System.Net.IPAddress[] ips = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server");
            
                         //  Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                         string sIpaddress = @"gtcp://" + ips[0].ToString() + ":54331";
            
                         // Create the telephony server object that will be the base class for all telephony operations.
                         TelephonyServer s_TelephonyServer = new TelephonyServer(sIpaddress, "MyUserName", "MyPassword");
            
                         // Initialize the array
                         string[] myDNISArray = new string[4];
            
                         // Add some DNIS's
                         myDNISArray[0] = "8005551212";
                         myDNISArray[1] = "8885551212";
                         myDNISArray[2] = "8775551212";
                         myDNISArray[3] = "8675309";
            
                         // Pass the whole array in which will register all DNIS's specified in string members
                         s_TelephonyServer.RegisterDNIS(myDNISArray);
                     }
                 }
                 </code>
                 <code lang="VB">
                 Class MyTelephonyClass
                     Public Sub ConnectToMyTelephonyServer()
                         ' Resolve DNS to a system IP address from My.VoiceElemnts.Server
                         Dim ips As System.Net.IPAddress() = System.Net.Dns.GetHostAddresses("My.VoiceElements.Server")
                    
                         ' Append the address with the port number and convert it to a string to pass to the TelephonyServer constructor
                         Dim sIpaddress As String = "gtcp://" + ips(0).ToString() + ":54331"
                    
                         ' Create the telephony server object that will be the base class for all telephony operations.
                         Dim s_TelephonyServer As New VoiceElements.Client.TelephonyServer(sIpaddress, "MyUserName", "MyPassword")
                    
                         ' Initialize the array
                         Dim myDNISArray As String() = New String(3) {}
                    
                         ' Add some DNIS's
                         myDNISArray(0) = "8005551212"
                         myDNISArray(1) = "8885551212"
                         myDNISArray(2) = "8775551212"
                         myDNISArray(3) = "8675309"
                    
                         ' Pass the whole array in which will register all DNIS's specified in string members
                         s_TelephonyServer.RegisterDNIS(myDNISArray)
                     End Sub
                 End Class
                 </code>
             </example>
             <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
             <seealso cref="P:VoiceElements.Client.ChannelResource.Dnis">Channel Resource DNIS property</seealso> 
             <seealso href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</seealso>
             <seealso href="http://support.voiceelements.com/index.php?title=What_are_the_deployment_options_for_Voice_Elements%3F">Deploying your Application</seealso> 
             <seealso href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</seealso>
             <seealso href="http://www.voiceelements.com/Services/TelephonyBank.aspx">Telephony Bank or "Cloud"</seealso>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetClientVersion">
            <summary>
            Returns the version of the client software.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetServerVersion">
            <summary>
            Returns the version of the server this client is connected to.
            </summary>
            <returns>Returns a System.Version reference representing the version number of the Voice Elements Server.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetConference">
            <summary>
            Requests a Conference object from the Telephony Server
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetChannel">
            <summary>
            Requests a Channel from the Telephony Server.
            </summary>
            <returns>A single channel resource object reference is returned that you may use to execute functions on the associated channel.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetChannel(System.Type)">
            <summary>
            Gets an available channel of a specific type.
            Available types are: SipChannel, DigitalChannel, MsiChannel, T1Channel or AnalogChannel.
            This function will throw an exception if the type of channel requested is not available.
            </summary>
            <param name="type">This specifies the type of channel you would like to retrieve.</param>
            <returns>A single channel resource object reference is returned that you may use to execute functions on the associated channel.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetChannel(System.String)">
            <summary>
            Gets an available channel using the device name.
            </summary>
            <param name="deviceName">This string specifies the exact device name, i.e. "dtiB2T1"</param>
            <returns>A single channel resource object reference is returned that you may use to execute functions on the associated channel.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetChannel(System.Int32)">
            <summary>
            Gets an available channel using a 1 based port number scheme.
            </summary>
            <param name="port">The 1 based port number to get.</param>
            <returns>A single channel resource object reference is returned that you may use to execute functions on the associated channel.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetVoiceResource">
            <summary>
            Requests a voice resoruce from the Telephony Server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetAllChannels">
            <summary>
            Gets all channels from the telephony server.  This is only valid in Dedicated Mode.
            </summary>
            <returns>Returns a list object containing a single item for every channel resource object retrieved.</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetAllVoiceResources">
            <summary>
            Gets all voice resources from the Telephony Server.  This is only valid in dedicated mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.IsFileCached(System.String)">
            <summary>
            Checks to see if the specified file is cached on the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.GetServerInfo">
            <summary>
            Gets basic server information and returns it in a ServerInfo class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveAppend(System.String,System.String)">
            <summary>
            Appends a wave file.  Both files must have the same format.
            </summary>
            <param name="baseFile">The file to be appended.</param>
            <param name="appendedFile">The file to append.</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveAppendFromVap(System.String,System.String,System.Int32[])">
            <summary>
            Appends Vap Segments from an indexed file to an exisiting wave file.
            </summary>
            <param name="baseFile"></param>
            <param name="vapFile"></param>
            <param name="vapIndicies"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveAppendFromVap(System.String,System.String,System.String)">
            <summary>
            Appends VAP segments from an indexed file to an exisiting wave file.
            </summary>
            <param name="baseFile"></param>
            <param name="vapFile"></param>
            <param name="commaSeparatedIndices"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveConcat(System.String[],System.String)">
            <summary>
            Concatenates Wave Files.  All files must have the same format.
            </summary>
            <param name="inputFiles"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveGetComment(System.String)">
            <summary>
            Gets a comment in the RIFF section of the wave file.  Comments should be in the LIST:INFO:ICMT field.
            </summary>
            <param name="filename">The filename in which you would like to read the comment.</param>
            <returns>The value of the comment</returns>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.WaveWriteComment(System.String,System.String)">
            <summary>
            Writes the comment into the file.
            </summary>
            <param name="filename">The filename that you would like to write the comment to.</param>
            <param name="comment">The contents of the comment.</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.TifToTif(System.String,System.String)">
            <summary>
            Converts a TIF file to a TIF file that dialogic can fax.
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.JpgToTif(System.String,System.String)">
            <summary>
            Converts a JPG file to a TIF file that dialogic can fax.
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.PdfToTif(System.String,System.String)">
            <summary>
            Converts the PDF file to a TIF.  This method is only available with a cache mode of server. You may need to convert this to a dialogic compatible TIF.
            </summary>
            <param name="inputFile">The filename of the pdf you would like to convert.</param>
            <param name="outputFile">The name of the filename</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.TifToPdf(System.String,System.String)">
            <summary>
            Converts a TIF file to a PDF.  (Requires Special Server Component)
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.TtsToFile(System.String,System.String)">
            <summary>
            Converts the specified text string into speech and saves it as the designated file.
            </summary>
            <param name="ttsText">String<para></para>
            Description: This is the text that the TTS engine will speak into the output file.<para></para>
            Note:  You can use parameters and tags to change the way the engine speaks and also specify currency, dates, etc.  For more information on configuring TTS
            by adding paramters to this string, see <see href="http://support.inventivelabs.com/index.php?title=Text-to-Speech_Tips_and_Topics_%28TTS%29">Text-to-Speech Tips and Topics</see> from Inventive Labs support.</param>
            <param name="outputFile">String of Path and File Name<para></para>
            This specifies the file for the wave output.  See remarks below about file format.</param>
            <exception cref="T:VoiceElements.Common.ElementsException"> Thrown when the file or text string are null or a file access exception occurs.</exception>
            <remarks>
            <strong>Output File Format</strong><para></para>
            The output file will <em>usually</em> be formatted as 8 kHz 8 bit mu-law wave file.  Voice Elements uses native G.711 which determines the format.
            This is the codec used at the transport level for SIP, T1's and PRI's.  This allows files to be played without any conversion overhead.<para></para>
            <br></br>
            <strong>Default Voice</strong><para></para>
            This method has an additional overload allowing the use of any available specific TTS voice.  In this case, since no voice is specified, Voice Elements
            will use the voice specified in the Name setting of the [TTS] section of the CTI32.ini settings file in the root application directory of the Voice
            Elements server.  For more information on TTS settings on the server, see 
            <see href="http://support.inventivelabs.com/index.php?title=Low_Level_and_Legacy_Telephony_Configuration_%28TDM%2C_Dialogic%2C_TTS%2C_Speech%29#.5BTTS.5D_-_Text_To_Speech_Related_Settings">
            TTS Settings on Voice Elements Server</see> from Inventive Labs support.
            </remarks>
            <example>This sample uses a passed Telphony Server object to record "Hello World from Mr TTS" to a file.
                <code lang="cs">
                    class TestClass
                    {
                        public void TestMethod(TelephonyServer telephonyServer)
                        {
                            // Record the string "Hello world from Mr TTS" to file "HelloWorld.wav"
                            telephonyServer.TtsToFile("Hello world from Mr TTS", "C:\\Temp\\HelloWorld.wav");
                            return;
                        }
                    }   
                </code>
            </example>
            <seealso href="http://support.inventivelabs.com/index.php?title=Low_Level_and_Legacy_Telephony_Configuration_%28TDM%2C_Dialogic%2C_TTS%2C_Speech%29#.5BTTS.5D_-_Text_To_Speech_Related_Settings">TTS Settings on Voice Elements Server</seealso>
            <seealso href="http://support.inventivelabs.com/index.php?title=Text-to-Speech_Tips_and_Topics_%28TTS%29">Text-to-Speech Tips and Topics</seealso> 
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.TtsToFile(System.String,System.String,System.String)">
            <summary>
            Converts the specified text string into speech and saves it as the designated file using the voice designated in the third parameter.
            </summary>
            <param name="ttsText">String<para></para>
            Description: This is the text that the TTS engine will speak into the output file.<para></para>
            Note:  You can use parameters and tags to change the way the engine speaks and also specify currency, dates, etc.  For more information on configuring TTS
            by adding paramters to this string, see <see href="http://support.inventivelabs.com/index.php?title=Text-to-Speech_Tips_and_Topics_%28TTS%29">Text-to-Speech Tips and Topics</see> from Inventive Labs support.</param>
            <param name="outputFile">String of Path and File Name<para></para>
            This specifies the file for the wave output.  See remarks below about file format.</param>
            <param name="voice">String<para></para>
            Description: This is the voice to be used in speaking the string into the file.  Many vendors provide a whole range of voices to use, including male, female and different accents.
            The voices available to you are installed on the Voice Elements server.  There are some low quality voices included in different versions of Windows for testing, but for production you may need to install one you prefer.  
            For help finding out what voices you have, see <see href="http://support.inventivelabs.com/index.php?title=How_do_I_find_out_what_voices_I_have_available%3F">How do I find what voices are available?</see> from Inventive Labs support.</param>
            <exception cref="T:VoiceElements.Common.ElementsException"> Thrown when the file or text string are null or a file access exception occurs.</exception>
            <remarks>
            <strong>Output File Format</strong><para></para>
            The output file will <em>usually</em> be formatted as 8 kHz 8 bit mu-law wave file.  Voice Elements uses native G.711 which determines the format.
            This is the codec used at the transport level for SIP, T1's and PRI's.  This allows files to be played without any conversion overhead.<para></para>
            <br></br>
            For more information on TTS settings on the server, see <see href="http://support.inventivelabs.com/index.php?title=Low_Level_and_Legacy_Telephony_Configuration_%28TDM%2C_Dialogic%2C_TTS%2C_Speech%29#.5BTTS.5D_-_Text_To_Speech_Related_Settings">
            TTS Settings on Voice Elements Server</see> from Inventive Labs support.
            </remarks>
            <example>This sample uses a passed Telphony Server object to record "Hello World from Mr TTS Sam" to a file using 'Microsoft Sam', a default Windows voice.
                <code lang="cs">
                    class TestClass
                    {
                        public void TestMethod(TelephonyServer telephonyServer)
                        {
                            // Record the string "Hello world from Mr TTS Sam" to file "HelloWorld.wav"
                            telephonyServer.TtsToFile("Hello world from Mr TTS Sam", "C:\\Temp\\HelloWorld.wav", "Microsoft Sam");
                            return;
                        }
                    }   
                </code>
            </example>
            <seealso href="http://support.inventivelabs.com/index.php?title=Low_Level_and_Legacy_Telephony_Configuration_%28TDM%2C_Dialogic%2C_TTS%2C_Speech%29#.5BTTS.5D_-_Text_To_Speech_Related_Settings">TTS Settings on Voice Elements Server</seealso>
            <seealso href="http://support.inventivelabs.com/index.php?title=Text-to-Speech_Tips_and_Topics_%28TTS%29">Text-to-Speech Tips and Topics</seealso> 
            <seealso href="http://support.inventivelabs.com/index.php?title=How_do_I_find_out_what_voices_I_have_available%3F">How do I find what voices are available?</seealso>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RequestPortState(System.Int32,VoiceElements.Interface.PortState,System.DateTime)">
            <summary>
            Requests the port to change state.
            </summary>
            <param name="port">The port id.</param>
            <param name="portState">The requested state.</param>
            <param name="dropTime">A universal time that instructs the server to drop any active call after this time and force the new state.</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RequestPortState(System.String,VoiceElements.Interface.PortState,System.DateTime)">
            <summary>
            Requests the port to change state.
            </summary>
            <param name="deviceName">The device name of the port.</param>
            <param name="portState">The requested state.</param>
            <param name="dropTime">A universal time that instructs the server to drop any active call after this time and force the new state.</param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.RemoveFromQueue(System.Guid)">
            <summary>
            Removes an item with the given guid from the queue.  It will throw an exception if the item is not found.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:VoiceElements.Client.TelephonyServer.StartCall``1(``0,VoiceElements.Common.SuccessCriteria)">
            <summary>
            Starts a dial with dial mode set to direct (instead of queued)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dialer"></param>
            <param name="successCriteria"></param>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.DialMode">
            <summary>
            The DialMode to use when placing calls using the QueueCall, or StartCall Command.
            </summary>
        </member>
        <member name="E:VoiceElements.Client.TelephonyServer.NewCall">
             <summary>
                Fires when there is a new inbound call sent from the Voice Elements Server.  
             </summary>
             <remarks>
                 <strong>You Must Register DNIS's to Receive Calls</strong><para></para>
                 Before the Voice Elements Server that handles telephony resources will send new calls to your application and fire this event, you must <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>
                 with the Voice Elements Server.  If this is not done, the server will not raise New Call Events.  For more information about DNIS, see <see href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</see>  <para></para>
                 <strong>Threading and Best Practices</strong><para></para>
                 Voice Elements handles creation of a thread behind the scenes before calling this event.  You can spend the entire length of the call in this event, therefore there is no need to quickly exit.  
                 The simplest approach to designing a simple inbound application is to create a inbound script class and call that class from this event.<para></para>
                 <strong>Define your New Call Event in your Start Up Code</strong><para></para>
                 Put something like this in your startup code: <c>s_TelephonyServer.NewCall += new VoiceElements.Client.NewCall(s_TelephonyServer_NewCall);</c>  Determine the entry point of your application and
                 decide where you would like to begin receiving these events.  You may make this before or after you <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>, since the server will
                 not even try to raise events until the registration is done.<para></para>
                 <strong>Subscribe to Disconnected Events</strong><para></para>
                 You should always subscribe to <see cref="E:VoiceElements.Client.ChannelResource.Disconnected">Disconnect Events</see> (aka Hang Ups) immediately upon getting a New Call event.  Always do this unless you explicitly have a reason not to do so.
                 The following code line will do this subscription (C#): <c>e.ChannelResource.Disconnected += new Disconnected(ChannelResource_Disconnected);</c>  Determine the entry point of your application and
                 decide where you would like to begin receiving these events.  You may make this before or after you <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>, since the server will
                 not even try to raise events until the registration is done.<para></para>
             </remarks>
             <returns>
                 This event comes along with a <see cref="T:VoiceElements.Client.NewCallEventArgs">New Call Argument Object</see>, which contains a reference to the 
                 <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> that has been assigned for the duration of the new call.  You will use this object along with 
                 the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see> for all <see cref="M:VoiceElements.Client.VoiceResource.Play(System.String)">Plays</see>,
                 <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> and other voice functions.  To access the Voice Resource, you will find a reference in the 
                 <see cref="P:VoiceElements.Client.ChannelResource.VoiceResource">Voice Resource Property</see> of the Channel Resource in the NewCallEventArgs.
             </returns>
             <example>
                 The example below shows a chunk of code that executes when the event arrives.  Notice that the sample immedaitely begins gathering information from the ChannelResource object reference
                 passed in the NewCallEventArgs object "e".  The code then Answers the call, creates and instance of an IVR application class and executes an RunScript method.
                 These are created by you and this model is recommended as the simplest way to encapsulate your IVR script.
                <code lang="cs">
                     static void s_TelephonyServer_NewCall(object sender, VoiceElements.Client.NewCallEventArgs e)
                     {
                         try
                         {
                             Log.Write("NewCall Arrival! DNIS: {0}  ANI: {1}  Caller ID Name: {2}", e.ChannelResource.Dnis, e.ChannelResource.Ani, e.ChannelResource.CallerIdName);
            
                             // Immediately subscribe to disconnects (hang ups), unles you have a specific reason to not see these events.
                              e.ChannelResource.Disconnected += new Disconnected(ChannelResource_Disconnected);
            
                             Log.Write("Answering...");
                             // Use the channel resource passed in with the event args to answer the call.
                             e.ChannelResource.Answer();
            
                             Log.Write("Calling My IVR Application");
                             // Call a class you have created which contains all the scripting and features of the voice interface for the call.
                             // You will find that this class will nee references to the Telephony Server, Channel Resource and Log.  You may add more depending on your application.
                             MyIVRApplication ivrApp = new MyIVRApplication(s_TelephonyServer, e.ChannelResource, Log);
                             // Call a method in your main telephony IVR class to execute your scripts
                             ivrApp1.RunScript();
                         }
                         catch (HangupException)
                         {
                               Log.Write("The Caller Hung Up.");
                         }
                         catch (Exception ex)
                         {
                              Log.WriteException(ex, "IvrApplication::NewCall");
                         }
                         finally
                         {
                             try
                             {
                                 // Unsubscribe the disconnected event.
                                 try { e.ChannelResource.Disconnected -= new Disconnected(ChannelResource_Disconnected); }
                                 catch { }
                                 // Force a Hangup for a safety net
                                 try { e.ChannelResource.Disconnect(); }
                                 catch { }
                                 // Always Dispose of the channel resource object you got along with the initial event for safety.
                                 try { e.ChannelResource.Dispose(); }
                                 catch { }
                                    Log.Write("Call complete.");
                              }
                              catch(Exception ex)
                             {
                                  Log.WriteException(ex, "Error in finally block");
                             }
                         }
                     }
                </code>
                 <code lang="VB">
                     Private Shared Sub s_TelephonyServer_NewCall(ByVal sender As Object, ByVal e As VoiceElements.Client.NewCallEventArgs)
                         Try
                             Log.Write("NewCall Arrival! DNIS: {0} ANI: {1} Caller ID Name: {2}", e.ChannelResource.Dnis, e.ChannelResource.Ani, e.ChannelResource.CallerIdName)
                             
                             ' Immediately subscribe to disconnects (hang ups), unles you have a specific reason to not see these events.
                             AddHandler e.ChannelResource.Disconnected, AddressOf ChannelResource_Disconnected
                                
                                Log.Write("Answering...")
                                ' Use the channel resource passed in with the event args to answer the call.
                                e.ChannelResource.Answer()
                                
                                Log.Write("Calling My IVR Application")
                                ' Call a class you have created which contains all the scripting and features of the voice interface for the call.
                                ' You will find that this class will nee references to the Telephony Server, Channel Resource and Log. You may add more depending on your application.
                                Dim ivrApp As New MyIVRApplication(s_TelephonyServer, e.ChannelResource, Log)
                                ' Call a method in your main telephony IVR class to execute your scripts
                               ivrApp1.RunScript()
                            Catch generatedExceptionName As HangupException
                                Log.Write("The Caller Hung Up.")
                            Catch ex As Exception
                                Log.WriteException(ex, "IvrApplication::NewCall")
                            Finally
                                Try
                                    ' Unsubscribe the disconnected event.
                                    Try
                                        RemoveHandler e.ChannelResource.Disconnected, AddressOf ChannelResource_Disconnected
                                    Catch
                                    End Try
                                    ' Force a Hangup for a safety net
                                    Try
                                        e.ChannelResource.Disconnect()
                                    Catch
                                    End Try
                                    ' Always Dispose of the channel resource object you got along with the initial event for safety.
                                    Try
                                        e.ChannelResource.Dispose()
                                    Catch
                                    End Try
                                    Log.Write("Call complete.")
                                Catch ex As Exception
                                    Log.WriteException(ex, "Error in finally block")
                                End Try
                            End Try
                        End Sub
                 </code>
             </example>
             <seealso cref="T:VoiceElements.Client.NewCallEventArgs">New Call Argument Object</seealso>
             <seealso cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Registering DNIS's to Receive Inbound Calls</seealso>
             <seealso href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</seealso>
             <seealso cref="E:VoiceElements.Client.ChannelResource.Disconnected">Disconnect Events</seealso>
             <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
             <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="E:VoiceElements.Client.TelephonyServer.PortStateChange">
            <summary>
            Fired when a port on the server changes state.
            </summary>
        </member>
        <member name="E:VoiceElements.Client.TelephonyServer.ConnectionLost">
            <summary>
            An Event fired when the connection to the server is lost.
            </summary>
        </member>
        <member name="E:VoiceElements.Client.TelephonyServer.ConnectionRestored">
            <summary>
            An Event fired when the connection to the server is restored.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.State">
            <summary>
            The state of the object.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.Guid">
            <summary>
            The GUID of this object's link to the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.Url">
            <summary>
            The Url of the Voice Elements Server currently connected.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.Username">
            <summary>
            The Username used to connect to the Voice Elements Server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.TelephonyLinkInfo">
            <summary>
            The Link Information that ties this object ot the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.AutoAssignVoiceResources">
            <summary>
            If this is true, voice resources will be assigned to channel objects by the server automatically.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.CacheMode">
            <summary>
      <para>
        Summary coming soon.
      </para>

      <value>Value coming soon.</value>
      <para></para>
    </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.CacheName">
            <summary>
            The cache name of the cache to use on the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.Voices">
            <summary>
            An Array of valid Voices for use with TTS.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.QueueChannelsToUse">
            <summary>
            This property controls the number of ports that you would like the queuing engine to be able to dial out on. For example, If you have 100 channels, and set this to 10, it will only send out a maximum of 10 concurrent calls at a time.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.HighMark">
            <summary>
            When the number of the items in the queue reaches this level. An event will be fired.
            </summary>
            ### Make public once we are ready to go live.
        </member>
        <member name="P:VoiceElements.Client.TelephonyServer.LowMark">
            <summary>
            When the number of the items in the queue reaches this level. An event will be fired.
            </summary>
            ### Make public once we are ready to go live
        </member>
        <member name="T:VoiceElements.Client.ConnectionRestored">
            <summary>
            The event that is fired when the connection to the server is reset.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.ConnectionRestoredEventArgs">
            <summary>
            Arguments for the ConnectionRestoredEventArgs Event
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ConnectionRestoredEventArgs.#ctor(VoiceElements.Client.TelephonyServer)">
            <summary>
            Constructs the Event Arguments for the ConnectionRestored Event.
            </summary>
            <param name="telephonyServer"></param>
        </member>
        <member name="P:VoiceElements.Client.ConnectionRestoredEventArgs.TelephonyServer">
            <summary>
            A reference to the Telephony Server that regained its connection.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.ConnectionLost">
            <summary>
            The event that is fired when the connection to the server is lost.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.ConnectionLostEventArgs">
            <summary>
            Constructs the Event Arguments for the ConnectionLost Event.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ConnectionLostEventArgs.#ctor(VoiceElements.Client.TelephonyServer)">
            <summary>
            Constructs the Event Arguments for the ConnectionLost Event.
            </summary>
            <param name="telephonyServer"></param>
        </member>
        <member name="P:VoiceElements.Client.ConnectionLostEventArgs.TelephonyServer">
            <summary>
            A reference to the Telephony Server that lost its connection.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ConnectionLostEventArgs.Reconnect">
            <summary>
            A flag to have the system continue to retry the connection.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.NewCall">
            <summary>
            A delegate for the event that is fired when a new call arrives from the Voice Elements Server.
            </summary>
            <param name="sender">This is a reference to the object that has sent the <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see>.</param>
            <param name="e">This is a reference to the <see cref="T:VoiceElements.Client.NewCallEventArgs">New Call Event Args</see> object.  When receiving a new call, this is most useful for retrieving the
            <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> and the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see>, which are used for all voice processing/telephony
            functions for the call.</param>
            <remarks>
                <b>Handling Inbound Call Basics</b><para></para>
                To begin learning about how to handle inbound calls, start by reading about the <b><see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see></b>.
            </remarks>
            <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
            <seealso cref="T:VoiceElements.Client.NewCallEventArgs">New Call Event Args</seealso>
            <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
            <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="T:VoiceElements.Client.NewCallEventArgs">
            <summary>
            The event arguments that are supplied with a new call event including a reference to the assigned Channel Resource.
            </summary>
            <remarks>
                <b>Using the Arguments</b><para></para>
                The event passes along "e" as a reference to an instance of this class with the <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see>.
                When receiving a new call, this is most useful for retrieving the <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> and the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see>, 
                which are used for all voice processing/telephony functions for the call. You will use this object along with 
                the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see> for all <see cref="M:VoiceElements.Client.VoiceResource.Play(System.String)">Plays</see>,
                <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> and other voice functions.  To access the Voice Resource, you will find a reference in the 
                <see cref="P:VoiceElements.Client.ChannelResource.VoiceResource">Voice Resource Property</see> of the Channel Resource in the NewCallEventArgs.<para></para>
                <b>Getting Started: Inbound Calls</b><para></para>
                To begin learning about how to handle inbound calls, start by reading about the <b><see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see></b>.
            </remarks>
            <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
            <seealso cref="T:VoiceElements.Client.NewCall">New Call Delegate</seealso>
            <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
            <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="M:VoiceElements.Client.NewCallEventArgs.#ctor(VoiceElements.Client.ChannelResource)">
            <summary>
            Constructor for new call event arguments which include a reference to the Channel Resource assigned by the server.
            </summary>
            <param name="channelResource">
            When receiving a new call, this is a reference to the 
            <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> assigned by the <see href="http://support.voiceelements.com/index.php?title=Voice_Elements_Server">Voice Elements Server</see>
            and will therefore contain a reference within to the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see>, which together with the <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> 
            are used for all voice processing/telephony functions for the call.</param>
            <remarks>
                <b>Handling Inbound Call Basics</b><para></para>
                To begin learning about how to handle inbound calls, start by reading about the <b><see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see></b>.
            </remarks>
            <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
            <seealso cref="T:VoiceElements.Client.NewCallEventArgs">New Call Event Args</seealso>
            <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
            <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="P:VoiceElements.Client.NewCallEventArgs.ChannelResource">
            <summary>
            The channel resource that encapsulates the call that is being offered by the server.
            </summary>
            <remarks>
                <b>Using the Channel Resource</b><para></para>
                When receiving a new call, use this <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> to retrieve the associated
                <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see>, which are both used for all voice processing/telephony functions for the call, including
                <see cref="M:VoiceElements.Client.VoiceResource.Play(System.String)">Plays</see>,
                <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> and other voice functions.<para></para>
                <b>Getting Started: Inbound Calls</b><para></para>
                To begin learning about how to handle inbound calls, start by reading about the <b><see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see></b>.
            </remarks>
            <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
            <seealso cref="T:VoiceElements.Client.NewCall">New Call Delegate</seealso>
            <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
            <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="P:VoiceElements.Client.NewCallEventArgs.Cancel">
            <summary>
            Informs server to drop the incoming call.  Leave false to take the call.
            </summary>
            <remarks>
                <b>Setting to True: Implications</b><para></para>
                If you set this to true, the New Call will be dropped immediately after you receive the <see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see>.  It 
                is not normal behavior unless you want your application to expicitly reject inbound calls.<para></para>
                <b>Getting Started: Inbound Calls</b><para></para>
                To begin learning about how to handle inbound calls, start by reading about the <b><see cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</see></b>.
            </remarks>
            <seealso cref="E:VoiceElements.Client.TelephonyServer.NewCall">New Call Event</seealso>
            <seealso cref="T:VoiceElements.Client.NewCallEventArgs">New Call Event Args</seealso>    
        </member>
        <member name="T:VoiceElements.Client.PortStateChangeEventArgs">
            <summary>
            Arguments used in a port state change.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.PortStateChangeEventArgs.PortIndexer">
            <summary>
            The port indexer of the port that is changing states.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.PortStateChangeEventArgs.DeviceName">
            <summary>
            The device name of the port that is changing states.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.PortStateChangeEventArgs.PortState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.Disconnected">
            <summary>
            The delegate for the Disconnected event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.DisconnectedEventArgs">
            <summary>
            The event arguments for the disconnected event.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.PortStateChange">
            <summary>
            A delegate used to fire the port state change event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.QueueLow">
            <summary>
            A delegate used for the QueueLow Event
            </summary>
            <param name="sender"></param>
            <param name="queueLowEventArgs"></param>
        </member>
        <member name="T:VoiceElements.Client.QueueHigh">
            <summary>
            A delegate used for the QueueHigh event.
            </summary>
            <param name="sender"></param>
            <param name="queueHighEventArgs"></param>
        </member>
        <member name="T:VoiceElements.Client.QueueLowEventArgs">
            <summary>
            The event arguments for the QueueLow Event
            </summary>
        </member>
        <member name="P:VoiceElements.Client.QueueLowEventArgs.TelephonyServer">
            <summary>
            The TelephonyServer that fired the event.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.QueueHighEventArgs">
            <summary>
            The event arguments for the QueueHigh Event
            </summary>
        </member>
        <member name="P:VoiceElements.Client.QueueHighEventArgs.TelephonyServer">
            <summary>
            The TelephonyServer that fired the event.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.TelephonyServerLogin">
            <summary>
            Login Information For a Telephony Server
            </summary>
        </member>
        <member name="F:VoiceElements.Client.TelephonyServerLogin.Url">
            <summary>
            The URL of the Telephony Server
            </summary>
        </member>
        <member name="F:VoiceElements.Client.TelephonyServerLogin.Username">
            <summary>
            The Username
            </summary>
        </member>
        <member name="F:VoiceElements.Client.TelephonyServerLogin.Password">
            <summary>
            The Password
            </summary>
        </member>
        <member name="T:VoiceElements.Client.T1Channel">
            <summary>
            Represents a T1 based channel on the Telephony Server.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.ChannelResource">
            <summary>
            Represents the base class for all Channel objects.  
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            Processes Commands From the Server
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.Dial(System.String)">
            <summary>
            Dials the phone number specified.
            </summary>
            <param name="phonenumber">the number to dial.</param>
            <returns>The result of the dial.</returns>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.Disconnect">
            <summary>
            Requests the Server to disconnect the current call.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.Disconnect(System.Int32)">
            <summary>
            Requests the Server to disconnect the current call.  Optionally specifying a cause code.
            </summary>
            <param name="causeCode">This is an optional integer of a cause you would like to pass when disconnecting.  This may be passed to the carrier
            depending on the underlying protocol being used. 
            </param>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.IsConnected">
            <summary>
            Returns the status of the current call.
            </summary>
            <returns>True if a call is connected.  Otherwise, false.</returns>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.Answer">
            <summary>
            Answers an incoming call.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.GetFaxResource">
            <summary>
            Gets a compatible FaxResource for this ChannelResource.
            </summary>
            <returns>A reference to the fax resource and also sets the FaxResource property for this ChannelResource.</returns>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.StopDial">
            <summary>
            Stops a Dial that is currently in progress.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.SetMonitorStatus(System.String)">
            <summary>
            Sets the Monitor Status Element
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.SetMonitorData(System.String,System.String,System.Boolean)">
            <summary>
            Sets customer Monitor Data
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="clearFlag"></param>
        </member>
        <member name="M:VoiceElements.Client.ChannelResource.TransferApplication(System.String,System.String)">
            <summary>
            Transfers the ChannelResource to a different application.
            </summary>
            <param name="dnis">The Dnis of the application that you would like to transfer to.</param>
            <param name="transferData">Value that you would like to send to the receiving application.</param>
        </member>
        <member name="E:VoiceElements.Client.ChannelResource.Disconnected">
            <summary>
            Fires when the channel is disconnected at the server.
            </summary>
        </member>
        <member name="E:VoiceElements.Client.ChannelResource.NewCall">
             <summary>
                Fires when there is a new inbound call sent from the Voice Elements Server.  
             </summary>
             <remarks>
                 <strong>You Must Register DNIS's to Receive Calls</strong><para></para>
                 Before the Voice Elements Server that handles telephony resources will send new calls to your application and fire this event, you must <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>
                 with the Voice Elements Server.  If this is not done, the server will not raise New Call Events.  For more information about DNIS, see <see href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</see>  <para></para>
                 <strong>Threading and Best Practices</strong><para></para>
                 Voice Elements handles creation of a thread behind the scenes before calling this event.  You can spend the entire length of the call in this event, therefore there is no need to quickly exit.  
                 The simplest approach to designing a simple inbound application is to create a inbound script class and call that class from this event.<para></para>
                 <strong>Define your New Call Event in your Start Up Code</strong><para></para>
                 Put something like this in your startup code: <c>s_TelephonyServer.NewCall += new VoiceElements.Client.NewCall(s_TelephonyServer_NewCall);</c>  Determine the entry point of your application and
                 decide where you would like to begin receiving these events.  You may make this before or after you <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>, since the server will
                 not even try to raise events until the registration is done.<para></para>
                 <strong>Subscribe to Disconnected Events</strong><para></para>
                 You should always subscribe to <see cref="E:VoiceElements.Client.ChannelResource.Disconnected">Disconnect Events</see> (aka Hang Ups) immediately upon getting a New Call event.  Always do this unless you explicitly have a reason not to do so.
                 The following code line will do this subscription (C#): <c>e.ChannelResource.Disconnected += new Disconnected(ChannelResource_Disconnected);</c>  Determine the entry point of your application and
                 decide where you would like to begin receiving these events.  You may make this before or after you <see cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Register DNIS(s)</see>, since the server will
                 not even try to raise events until the registration is done.<para></para>
             </remarks>
             <returns>
                 This event comes along with a <see cref="T:VoiceElements.Client.NewCallEventArgs">New Call Argument Object</see>, which contains a reference to the 
                 <see cref="T:VoiceElements.Client.ChannelResource">Channel Resource</see> that has been assigned for the duration of the new call.  You will use this object along with 
                 the <see cref="T:VoiceElements.Client.VoiceResource">Voice Resource</see> for all <see cref="M:VoiceElements.Client.VoiceResource.Play(System.String)">Plays</see>,
                 <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">Get Responses</see> and other voice functions.  To access the Voice Resource, you will find a reference in the 
                 <see cref="P:VoiceElements.Client.ChannelResource.VoiceResource">Voice Resource Property</see> of the Channel Resource in the NewCallEventArgs.
             </returns>
             <example>
                 The example below shows a chunk of code that executes when the event arrives.  Notice that the sample immedaitely begins gathering information from the ChannelResource object reference
                 passed in the NewCallEventArgs object "e".  The code then Answers the call, creates and instance of an IVR application class and executes an RunScript method.
                 These are created by you and this model is recommended as the simplest way to encapsulate your IVR script.
                <code lang="cs">
                     static void s_TelephonyServer_NewCall(object sender, VoiceElements.Client.NewCallEventArgs e)
                     {
                         try
                         {
                             Log.Write("NewCall Arrival! DNIS: {0}  ANI: {1}  Caller ID Name: {2}", e.ChannelResource.Dnis, e.ChannelResource.Ani, e.ChannelResource.CallerIdName);
            
                             // Immediately subscribe to disconnects (hang ups), unles you have a specific reason to not see these events.
                              e.ChannelResource.Disconnected += new Disconnected(ChannelResource_Disconnected);
            
                             Log.Write("Answering...");
                             // Use the channel resource passed in with the event args to answer the call.
                             e.ChannelResource.Answer();
            
                             Log.Write("Calling My IVR Application");
                             // Call a class you have created which contains all the scripting and features of the voice interface for the call.
                             // You will find that this class will nee references to the Telephony Server, Channel Resource and Log.  You may add more depending on your application.
                             MyIVRApplication ivrApp = new MyIVRApplication(s_TelephonyServer, e.ChannelResource, Log);
                             // Call a method in your main telephony IVR class to execute your scripts
                             ivrApp1.RunScript();
                         }
                         catch (HangupException)
                         {
                               Log.Write("The Caller Hung Up.");
                         }
                         catch (Exception ex)
                         {
                              Log.WriteException(ex, "IvrApplication::NewCall");
                         }
                         finally
                         {
                             try
                             {
                                 // Unsubscribe the disconnected event.
                                 try { e.ChannelResource.Disconnected -= new Disconnected(ChannelResource_Disconnected); }
                                 catch { }
                                 // Force a Hangup for a safety net
                                 try { e.ChannelResource.Disconnect(); }
                                 catch { }
                                 // Always Dispose of the channel resource object you got along with the initial event for safety.
                                 try { e.ChannelResource.Dispose(); }
                                 catch { }
                                    Log.Write("Call complete.");
                              }
                              catch(Exception ex)
                             {
                                  Log.WriteException(ex, "Error in finally block");
                             }
                         }
                     }
                </code>
                 <code lang="VB">
                     Private Shared Sub s_TelephonyServer_NewCall(ByVal sender As Object, ByVal e As VoiceElements.Client.NewCallEventArgs)
                         Try
                             Log.Write("NewCall Arrival! DNIS: {0} ANI: {1} Caller ID Name: {2}", e.ChannelResource.Dnis, e.ChannelResource.Ani, e.ChannelResource.CallerIdName)
                             
                             ' Immediately subscribe to disconnects (hang ups), unles you have a specific reason to not see these events.
                             AddHandler e.ChannelResource.Disconnected, AddressOf ChannelResource_Disconnected
                                
                                Log.Write("Answering...")
                                ' Use the channel resource passed in with the event args to answer the call.
                                e.ChannelResource.Answer()
                                
                                Log.Write("Calling My IVR Application")
                                ' Call a class you have created which contains all the scripting and features of the voice interface for the call.
                                ' You will find that this class will nee references to the Telephony Server, Channel Resource and Log. You may add more depending on your application.
                                Dim ivrApp As New MyIVRApplication(s_TelephonyServer, e.ChannelResource, Log)
                                ' Call a method in your main telephony IVR class to execute your scripts
                               ivrApp1.RunScript()
                            Catch generatedExceptionName As HangupException
                                Log.Write("The Caller Hung Up.")
                            Catch ex As Exception
                                Log.WriteException(ex, "IvrApplication::NewCall")
                            Finally
                                Try
                                    ' Unsubscribe the disconnected event.
                                    Try
                                        RemoveHandler e.ChannelResource.Disconnected, AddressOf ChannelResource_Disconnected
                                    Catch
                                    End Try
                                    ' Force a Hangup for a safety net
                                    Try
                                        e.ChannelResource.Disconnect()
                                    Catch
                                    End Try
                                    ' Always Dispose of the channel resource object you got along with the initial event for safety.
                                    Try
                                        e.ChannelResource.Dispose()
                                    Catch
                                    End Try
                                    Log.Write("Call complete.")
                                Catch ex As Exception
                                    Log.WriteException(ex, "Error in finally block")
                                End Try
                            End Try
                        End Sub
                 </code>
             </example>
             <seealso cref="T:VoiceElements.Client.NewCallEventArgs">New Call Argument Object</seealso>
             <seealso cref="M:VoiceElements.Client.TelephonyServer.RegisterDNIS">Registering DNIS's to Receive Inbound Calls</seealso>
             <seealso href="http://en.wikipedia.org/wiki/DNIS">What's a DNIS?</seealso>
             <seealso cref="E:VoiceElements.Client.ChannelResource.Disconnected">Disconnect Events</seealso>
             <seealso cref="T:VoiceElements.Client.ChannelResource">Channel Resource Object</seealso>
             <seealso cref="T:VoiceElements.Client.VoiceResource">Voice Resource Object</seealso>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.CallProgress">
            <summary>
            Sets the call progress mode for this channel.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.MaximumTime">
            <summary>
            Sets the maximum time to wait for a dial to complete.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.OriginatingPhoneNumber">
            <summary>
            The phone number to use for the caller id of an outbound call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.DialResult">
            <summary>
            The result of the last dial.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.Dnis">
            <summary>
            The DNIS of the last inbound call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.Ani">
            <summary>
            The ANI of the last inbound call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.CallerIdName">
            <summary>
            The Caller Id Name of the last inbound call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.CallNumber">
            <summary>
            The call number of the current or last call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.GeneralCause">
            <summary>
            The General Cause Code of a Disconnected Call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.GeneralCauseMessage">
            <summary>
            The General Cause Message of a Disconnected Call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.GcCause">
            <summary>
            The Global Call Cause Code of a Disconnected Call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.GcCauseMessage">
            <summary>
            The Global Call Cause Message of a Disconnected Call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.DropError">
            <summary>
            The DropError Code of a Disconnected Call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.FaxResource">
            <summary>
            The fax resource associated with this channel.  To get a fax resource, call GetFaxResource on this object.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.DropTime">
            <summary>
            The time at which the server should automatically drop the call.  This value is UniversalTime.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.PortIndexer">
            <summary>
            The one based index of this channel on the server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.VoiceResource">
            <summary>
            The voice resource associated with this channel.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.CallProgressTemplate">
            <summary>
            Sets the call progress template to use as a basis for this call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.CallProgressOverrides">
            <summary>
            A serializable object that provides override information to the call progress template.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.TransferData">
            <summary>
            Data that is transfered from a call to TransferApplication
            </summary>
        </member>
        <member name="P:VoiceElements.Client.ChannelResource.BillingInformation">
            <summary>
            Gets/Sets the billing information on supported systems
            </summary>
        </member>
        <member name="T:VoiceElements.Client.DigitalChannel">
            <summary>
            Represents an Digitally based channel on the Telephony Server.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.DigitalChannel.SetupMessage">
            <summary>
            Returns a byte array containing the setup message from the carrier, if available.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.DigitalChannel.FacilityMessage">
            <summary>
            Returns a byte array containing the last facility message from the carrier, if available.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.SipChannel">
            <summary>
            Represents a SIP based channel on the Telephony Server.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            Processes Commands
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.Reinvite(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Issues a reinvite for the current call. This allows you to redirect the RTP traffic to a different address and is used to reduce latency in the audio stream.
            </summary>
            <param name="rtpCodec">The Codec to use with the reinvite.</param>
            <param name="rtpAddress">The address of the remote endpoint.</param>
            <param name="rtpPort">The port of the remote endpoint.</param>
            <param name="rtpSdp">The SDP of the first leg of the call.</param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.Refer(System.String,System.String)">
            <summary>
            Performs an unattended transfer.
            </summary>
            <param name="ipAddress"></param>
            <param name="phoneNumber"></param>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.Refer(VoiceElements.Client.RoutableResource)">
            <summary>
            Performs an attended transfer.
            </summary>
            <param name="routableResource"></param>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.Redirect(System.String)">
            <summary>
            Redirects an incoming call to an alternate address.
            </summary>
            <param name="address">The address to redirect the traffic to.  Format: &lt;sip:500@162.18.13.4&gt;</param>
        </member>
        <member name="M:VoiceElements.Client.SipChannel.Redirect(System.String[])">
            <summary>
            Redirects an incoming call to alternate addresses
            </summary>
            <param name="addresses">An array of addresses to redirect the traffic to.  Format: &lt;sip:500@162.18.13.4&gt;</param>
            <returns></returns>
        </member>
        <member name="E:VoiceElements.Client.SipChannel.QosEvent">
            <summary>
            Triggered when Qos Events Occur
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.RtpCodec">
            <summary>
            Returns the Codec of the RTP in use on this channel.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.RtpAddress">
            <summary>
            Returns the Address of the RTP in use on this channel.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.RtpPort">
            <summary>
            Returns the Port of the RTP in use on this channel.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.IncomingSipHeaders">
            <summary>
            Gets the Incoming Sip Headers
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.RemoteCallControlAddress">
            <summary>
            The call control address on the remote side that is handling this call.
            Returned as: IPAddress:Port
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.Dialog">
            <summary>
            Gets the current dialog
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.OriginatingCallerIdName">
            <summary>
            Sets the Originating Caller Id Name for a sip based call
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.OutgoingSipHeaders">
            <summary>
            Sets the Outgoing Sip Headers
            </summary>
        </member>
        <member name="P:VoiceElements.Client.SipChannel.RtpSdp">
            <summary>
            Returns the Sdp of the RTP in use on this channel.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.QosEvent">
            <summary>
            Deleegate for Qos Events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.QosEventArgs">
            <summary>
            Event Arguments for Qos Events
            </summary>
        </member>
        <member name="M:VoiceElements.Client.QosEventArgs.#ctor(VoiceElements.Common.QosEventType,System.Boolean)">
            <summary>
            Constructs a new QosEvent
            </summary>
            <param name="qosEventType"></param>
            <param name="qosState"></param>
        </member>
        <member name="P:VoiceElements.Client.QosEventArgs.QosEventType">
            <summary>
            The Type Of Qos Event Triggered
            </summary>
        </member>
        <member name="P:VoiceElements.Client.QosEventArgs.QosState">
            <summary>
            The Triggered state.  true=AlarmOn, false=AlarmOff
            </summary>
        </member>
        <member name="T:VoiceElements.Client.Dialer">
            <summary>
            A base class that should be overridden that assists with making outbound calls.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.Dialer.#ctor(System.String)">
            <summary>
            Creates an instance of the dialer class, using the default settings.
            </summary>
            <param name="phoneNumber"></param>
        </member>
        <member name="M:VoiceElements.Client.Dialer.OnDialStart">
            <summary>
            Override if you'd like to log additional data before the Dial starts.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.Dialer.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="phoneNumber"></param>
            <param name="originatingPhoneNumber"></param>
        </member>
        <member name="M:VoiceElements.Client.Dialer.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="phoneNumber"></param>
            <param name="originatingPhoneNumber"></param>
            <param name="callExpires"></param>
        </member>
        <member name="M:VoiceElements.Client.Dialer.#ctor(System.String,System.String,System.DateTime,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="phoneNumber"></param>
            <param name="originatingPhoneNumber"></param>
            <param name="callExpires"></param>
            <param name="callProgressTemplate"></param>
            <param name="callProgressOverrides"></param>
        </member>
        <member name="M:VoiceElements.Client.Dialer.#ctor(System.String,System.String,System.DateTime,System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="phoneNumber"></param>
            <param name="originatingPhoneNumber"></param>
            <param name="callExpires"></param>
            <param name="callProgressTemplate"></param>
            <param name="callProgressOverrides"></param>
            <param name="userObject"></param>
        </member>
        <member name="M:VoiceElements.Client.Dialer.OnDialComplete(VoiceElements.Client.ChannelResource)">
            <summary>
            This method should be overridden. It is fired when a dial has completed.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.BillingInformation">
            <summary>
            These are custom settings that you can define to modify the CPA settings used for a Dial. This property will only be used in conjunction with HMP Elements.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.MaximumTime">
            <summary>
            The maximum time to wait before timing out on a dial.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.PhoneNumber">
            <summary>
            The phone number to call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.CallExpires">
            <summary>
            The time at which you would like to remove the call from the queue (thereby restricting the call from being made).
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.UserObject">
            <summary>
            An object that can be passed in by the user, that can be accessed when the OnDialComplete method is called.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.OriginatingPhoneNumber">
            <summary>
            The phone number to use for the caller id of an outbound call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.CallStarted">
            <summary>
            The time that the call was initiated.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.DialResult">
            <summary>
            The call progress result of the dial.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.DialReturnType">
            <summary>
            The result of the call.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.SipOriginatingCallerIdName">
            <summary>
            The Originating CallerId Setting to use. This is only valid for SIP
            </summary>
        </member>
        <member name="P:VoiceElements.Client.Dialer.UniqueId">
            <summary>
            The uniqueId for the instance of the Dialer class.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.DialerList.#ctor(System.Collections.Generic.List{VoiceElements.Client.Dialer},VoiceElements.Common.DialType)">
            <summary>
            Creates a new instance of the dialer list class.
            </summary>
            <param name="calls"></param>
            <param name="dialType"></param>
        </member>
        <member name="M:VoiceElements.Client.DialerList.#ctor(System.Collections.Generic.List{VoiceElements.Client.Dialer},VoiceElements.Common.DialType,VoiceElements.Common.CallPriority)">
            <summary>
            Creates a new instance of the dialer class.
            </summary>
            <param name="calls"></param>
            <param name="dialType"></param>
            <param name="priority"></param>
        </member>
        <member name="M:VoiceElements.Client.DialerList.#ctor(System.Collections.Generic.List{VoiceElements.Client.Dialer},VoiceElements.Common.DialType,VoiceElements.Common.CallPriority,VoiceElements.Common.SuccessCriteria)">
            <summary>
            Creates a new instance of the dialer list class.
            </summary>
            <param name="calls"></param>
            <param name="dialType"></param>
            <param name="priority"></param>
            <param name="successCriteria"></param>
        </member>
        <member name="M:VoiceElements.Client.DialerList.#ctor(System.Collections.Generic.List{VoiceElements.Client.Dialer},VoiceElements.Common.DialType,VoiceElements.Common.CallPriority,VoiceElements.Common.SuccessCriteria,System.String)">
            <summary>
            Creates a new instance of the dialer list class.
            </summary>
            <param name="calls"></param>
            <param name="dialType"></param>
            <param name="priority"></param>
            <param name="successCriteria"></param>
            <param name="filename"></param>
        </member>
        <member name="M:VoiceElements.Client.DialerList.#ctor(System.Collections.Generic.List{VoiceElements.Client.Dialer},VoiceElements.Common.DialType,VoiceElements.Common.CallPriority,VoiceElements.Common.SuccessCriteria,System.String,System.String)">
            <summary>
            Creates a new instance of the dialer list class.
            </summary>
            <param name="calls"></param>
            <param name="dialType"></param>
            <param name="priority"></param>
            <param name="successCriteria"></param>
            <param name="filename"></param>
            <param name="acceptableDtmf"></param>
        </member>
        <member name="P:VoiceElements.Client.DialerList.DialType">
            <summary>
            The DialType to use for this set of calls.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.DialerList.PortsRequired">
            <summary>
            Used to determine how many ports are required for a dial to start.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.DialerQueue">
            <summary>
            This is an internal class that manages the queueing for the dialer methods
            </summary>
        </member>
        <member name="F:VoiceElements.Client.DialerQueue.m_DialerOnDeck">
            <summary>
            This is a call that is waiting to dial out.  I am using a list because I may want to allow other calls to go out if I am waiting for multiple channels on a simultaneous call.
            </summary>
            It's also used so I can grab an instance of an object from the GetNextItemInQueue method
        </member>
        <member name="F:VoiceElements.Client.DialerQueue.m_ResourcesOnDeck">
            <summary>
            These are the resources that are on deck to be used.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.SimultaneousCall.MonitorCalls">
            <summary>
            Monitors calls to determine if we should stop the dial.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.SequentialCall">
            <summary>
            The Single call gets routed through the sequential call first, because it has logic for determining if the call is expired, and for looping through the dialer list.  This could be changed, but it works.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.OnDialComplete">
            <summary>
            Signals to the simultaneous thread that it has completed.
            </summary>
            <param name="singleCall"></param>
        </member>
        <member name="T:VoiceElements.Client.RemoteObjectState">
            <summary>
            Indicates the state of a remote object.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.RemoteObjectState.Error">
            <summary>
            An error has occured.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.RemoteObjectState.Disconnected">
            <summary>
            Indicates the Disconnected State
            </summary>
        </member>
        <member name="F:VoiceElements.Client.RemoteObjectState.Connected">
            <summary>
            Indicates the Connected State.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxResource">
            <summary>
            Represents a single Fax Resource on the Telephony Server.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            Processes Commands From the Server
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.Send(System.String)">
            <summary>
            Sends the specified document.
            </summary>
            <param name="filename">This is the path and filename of the document file you would like to send as a Fax.</param>
            <returns>This returns a FaxResult.  See the enum definitions for an explanation of all possible results.</returns>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.Send(System.String[])">
            <summary>
            Sends the specified document.
            </summary>
            <param name="filenames">This is an array of which each item is the path and filename of a document file you would like to send as a Fax.</param>
            <returns>This returns a FaxResult.  See the enum definitions for an explanation of all possible results.</returns>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.Receive(System.String)">
            <summary>
            Receives a fax.
            </summary>
            <param name="filename">Thie is the path and filename where you would like the Fax saved.</param>
            <returns>This returns a FaxResult.  See the enum definitions for an explanation of all possible results.</returns>
        </member>
        <member name="M:VoiceElements.Client.FaxResource.Stop">
            <summary>
            Stops any current activity on the fax resource, such as a play or a record.
            </summary>
        </member>
        <member name="E:VoiceElements.Client.FaxResource.FaxStatus">
            <summary>
            This event fires at periodic intervals when sending or recieving faxes.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.EnableFaxStatusEvents">
            <summary>
            Enables the FaxStatus Events
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.CalledSubscriberId">
            <summary>
            The CSID of the called party.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.TransmittingSubscriberId">
            <summary>
            The TSID used during sending.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.CoverPage">
            <summary>
            Gets or Sets the CoverPage file.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.HeaderText">
            <summary>
            Test transmitted at the top of each page.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.PageCount">
            <summary>
            Page count of the last fax operation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.FaxResult">
            <summary>
            FaxResult of the last fax operation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxResource.PhaseEStatus">
            <summary>
            Error condition information.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxResult">
            <summary>
            The result of a fax operation.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.RemoteDisconnect">
            <summary>
            Operation cancelled due to RemoteDisconnect
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.Error">
            <summary>
            Unknown Error Condition
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.Normal">
            <summary>
            Normal (Success)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NotImplemented">
            <summary>
            EFX_NOTIMP -> 0x0100 (Function not implemented)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.Polled">
            <summary>
            EFX_POLLED -> 0x0101 (Received poll from remote)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoPoll">
            <summary>
            EFX_NOPOLL  -> 0x0102 (Remote did not accept poll)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NotCompatible">
            <summary>
            EFX_COMPAT -> 0x0103 (Hardware incapable of transmitting at specified width and resolution)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadTiff">
            <summary>
               EFX_BADTIF -> 0x0104 (Incorrect TIFF/F format)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadTag">
            <summary>
            EFX_BADTAG -> 0x0105 (Incorrect values for TIFF/F tags)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoPage">
            <summary>
            EFX_NOPAGE -> 0x0106 (Specified page missing in TIFF/F file)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.Disconnect">
            <summary>
            EFX_DISCONNECT -> 0x0107 (Remote has disconnected)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.RetryDisconnect">
            <summary>
            EFX_RETRYDCN -> 0x0108 (Disconnected after specifed retries)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadIott">
            <summary>
            EFX_BADIOTT -> 0x0109 (DF_IOTT has incorrect entries)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadPage">
            <summary>
            EFX_BADPAGE -> 0x010A (Not a valid page in TIFF/F file)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoState">
            <summary>
            EFX_NOSTATE -> 0x010B (Initial state not set)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadState">
            <summary>
            EFX_BADSTATE -> 0x010C (Incorrect value for initial state)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.MaxChanCapacity">
            <summary>
            EFX_MAXCHAN -> 0x010D (max chan capacity reached)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoMemory">
            <summary>
            EFX_NOMEM -> 0x010E (cannot allocate memory for more pages)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.InvalidArgument">
            <summary>
            EFX_INVALARG -> 0x010f (invalid argument to function)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.InvalidFunction">
            <summary>
            EFX_INVALFUNC -> 0x0110 (invalid call to function - calling)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoFaxCapability">
            <summary>
            EFX_NOFAX -> 0x0111 (no fax capability on this board)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NotIdle">
            <summary>
            EFX_NOTIDLE -> 0x0112 (channel is not idle)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadParameter">
            <summary>
            EFX_BADPARM -> 0x0113 (Invalid value for fax parameter)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadTiffHeader">
            <summary>
            EFX_BADTFHDR -> 0x0114 (Bad TIFF/F header)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.Unsupported">
            <summary>
            EFX_UNSUPPORTED -> 0x0115 (Unsupported feature)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.FirmwareVersion">
            <summary>
            EFX_RDFWVER -> 0x0116 (Error reading firmware version)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NsfBuffer">
            <summary>
            EFX_NSFBUFF -> 0x0118 (NSF buffer less than 2 bytes long)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoData">
            <summary>
            EFX_NODATA -> 0x0119 (Requested data not available)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.NoTimeSlot">
            <summary>
            EFX_NOTIMESLOT -> 0x011A (No timeslot assigned to Fax channel)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.InvalidFont">
            <summary>
            EFX_INVALID_FONT -> 0x011B (Invalid font in font file)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.InvalidCommandData">
            <summary>
            EFX_CMDDATA -> 0x01fb (Invalid cmd/data sent to Firmware)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.FirmwareError">
            <summary>
            EFX_FWERROR -> 0x01fc (Firmware Error)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.BadPhase">
            <summary>
            EFX_BADPHASE -> 0x01fd (unexpected phase transition)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.DriverError">
            <summary>
            EFX_DRVERROR -> 0x01fe (Error in Driver)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResult.LibraryError">
            <summary>
            EFX_LIBERROR -> 0x01ff (Error in library state machine)
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxEncoding">
            <summary>
            The fax encoding scheme between the transmitter and receiver.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxEncoding.ModifiedHuffman">
            <summary>
            DFS_MH -> 0
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxEncoding.ModifiedRead">
            <summary>
            DFS_MR -> 1
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxEncoding.ModifiedModifiedRead">
            <summary>
            DFS_MMR -> 2
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxPhaseDCommand">
            <summary>
            The Phase D command
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.EndOfProcedure">
            <summary>
            DFS_EOP -> 0
            End of Procedure – Terminate fax session. Progress to Phase E and disconnect fax call.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.MultiPageSignal">
            <summary>
            DFS_MPS -> 1
            Multi-Page Signal – End of current fax document page, more fax data to follow. 
            Next fax document page is in the same format as the current page, so proceed directly to Phase C.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.EndOfMessage">
            <summary>
            DFS_EOM -> 2
            End of Message – End of current fax document page, more fax data to follow. 
            Return to Phase B and negotiate parameters for next fax document page.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.Poll">
            <summary>
            DFS_POLL -> 3
            A poll request was sent.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.PRI_EndOfProcedure">
            <summary>
            DFS_PRI_EOP -> 16
            Request for operator intervention sent (PRI_EOP) (not supported on DM3 boards)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.PRI_MultiPageSignal">
            <summary>
            DFS_PRI_MPS -> 17
            Request for operator intervention sent (PRI_MPS) (not supported on DM3 boards)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDCommand.PRI_EndOfMessage">
            <summary>
            DFS_PRI_EOM -> 18
            Request for operator intervention sent (PRI_EOM) (not supported on DM3 boards)
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxPhaseDReply">
            <summary>
            The Phase D reply
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDReply.MessageConfirmation">
            <summary>
            DFS_MCF -> 1
            DFS_MCF Message confirmation - valid fax image received, ready for more pages
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDReply.RetrainNegative">
            <summary>
            DFS_RTN -> 2
            DFS_RTN Retrain negative - bad fax image received, retrain and resend image
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDReply.RetrainPositive">
            <summary>
            DFS_RTP -> 3
            DFS_RTP Retrain positive - valid fax image received but retraining required
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDReply.ProcedureInterruptPositive">
            <summary>
            DFS_PIP -> 4
            DFS_PIP Procedure interrupt positive - operator intervention request
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPhaseDReply.ProcedureInterruptNegative">
            <summary>
            DFS_PIN -> 5
            DFS_PIN Procedure interrupt negative - operator intervention request
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxWidth">
            <summary>
            The value of the negotiated width (in pixels per line) of the fax page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxWidth.Width1748">
            <summary>
            DF_WID1728 -> 1728
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxWidth.Width2048">
            <summary>
            DF_WID2048 -> 2048
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxWidth.Width2432">
            <summary>
            DF_WID2432 -> 2432
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxResolution">
            <summary>
            The vertical resolution of the page that is sent or received
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResolution.High">
            <summary>
            DF_RESHI -> 196
            High vertical resolution (fine) - 196 lines or pels per inch
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxResolution.Low">
            <summary>
            DF_RESLO -> 98
            Low vertical resolution (coarse) - 98 lines or pels per inch
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxBaudRate">
            <summary>
            The fax transfer speed (in baud) of the last page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.MaximumBaud">
            <summary>
            DF_MAXBAUD -> 0xFFFF
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_14400">
            <summary>
            DF_14400BAUD -> 14400
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_12200">
            <summary>
            DF_12200BAUD -> 12200
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_9600">
            <summary>
            DF_9600BAUD -> 9600
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_7200">
            <summary>
            DF_7200BAUD -> 7200
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_4800">
            <summary>
            DF_4800BAUD -> 4800
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxBaudRate.Baud_2400">
            <summary>
            DF_2400BAUD -> 2400
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxState">
            <summary>
            Current state of fax channel device.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxState.Idle">
            <summary>
            CS_IDLE -> 1
            Fax channel is idle
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxState.Sending">
            <summary>
            CS_SENDFAX -> 8
            Fax channel is transmitting.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxState.Receiving">
            <summary>
            CS_RECVFAX -> 9
            Fax channel is receiving.
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxState.FaxIo">
            <summary>
            CS_FAXIO -> 10
            Fax channel is between pages OR when send or receive functions have returned but the fax session is still active.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.PhaseBStatus">
            <summary>
            Phase B status bitmap
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseBStatus.RemoteIdAvailable">
            <summary>
            DFS_REMOTEID -> 0x0100
            Remote station ID available
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseBStatus.RemoteStationNsfAvailable">
            <summary>
            DFS_NSF -> 0x0200
            Remote station Non-Standard Facilities (NSF) message available
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseBStatus.DcsOrDis">
            <summary>
            DFS_DCS -> 0x0400
            DFS_DIS -> 0x0400
            Digital Information Signal (DIS) message available, sent from receiver to transmitter 
            Digital Command Signal (DCS) message available, sent from transmitter to receiver
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseBStatus.SubaddressRoutingMessageAvailable">
            <summary>
            DFS_REMOTESUBADDR -> 0x0800
            Subaddress routing message available, sent from transmitter to receiver (not supported on DM3 boards)
            </summary>
        </member>
        <member name="T:VoiceElements.Client.PhaseEStatus">
            <summary>
            Phase E information describing errors that occurred during the T.30 fax protocol
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.NotSpecified">
            <summary>
            Not Specified
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T1EXPTX">
            <summary>
            EFX_T1EXPTX -> 100
            Timed out while waiting for a message
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NODISTX">
            <summary>
            EFX_NODISTX -> 101
            Received other than DIS (Digital Identification Signal) while waiting for DIS
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_GOTDCNTX">
            <summary>
            EFX_GOTDCNTX -> 102
            Received a DCN (Disconnect) while waiting for a DIS (Digital Identification Signal)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_BADDCSTX">
            <summary>
            EFX_BADDCSTX -> 103
            Received bad response to DCS (Digital Command Signal) or training
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_PHBDEADTX">
            <summary>
            EFX_PHBDEADTX -> 104
            Received no response to DCS (Digital Command Signal), training or TCF (Training Check)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOISETX">
            <summary>
            EFX_NOISETX -> 105
            Too much noise at 2400 bps
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_BADPGTX">
            <summary>
            EFX_BADPGTX -> 106
            Received a DCN (Disconnect) from remote after sending a page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_PHDDEADTX">
            <summary>
            EFX_PHDDEADTX -> 107
            No response after sending a page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_TXCOMP">
            <summary>
            EFX_TXCOMP -> 108
            Remote site is not transmit compatible
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_RXCOMP">
            <summary>
            EFX_RXCOMP -> 109
            Remote site is not receive compatible
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_INVALRSPTX">
            <summary>
            EFX_INVALRSPTX -> 110
            Invalid response after sending a page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOFINERECTX">
            <summary>
            EFX_NOFINERECTX -> 111
            Remote cannot receive fine resolution
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPRX">
            <summary>
            EFX_T2EXPRX -> 112
            Timed out while waiting for a message
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPMPSRX">
            <summary>
            EFX_T2EXPMPSRX -> 113
            Timed out while waiting for next fax page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPDCNRX">
            <summary>
            EFX_T2EXPDCNRX -> 114
            Timed out while waiting for DCN (Disconnect)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPDRX">
            <summary>
            EFX_T2EXPDRX -> 115
            Timed out while waiting for Phase D
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_INVALCMDRX">
            <summary>
            EFX_INVALCMDRX -> 116
            Unexpected command after page received
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPFAXRX">
            <summary>
            EFX_T2EXPFAXRX -> 117
            Timed out while waiting for fax page
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T2EXPRRRX">
            <summary>
            EFX_T2EXPRRRX -> 118
            Timer T2 expired waiting for RR command
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_T1EXPRX">
            <summary>
            EFX_T1EXPRX -> 120
            Timed out while waiting for a message
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_GOTDCSRX">
            <summary>
            EFX_GOTDCSRX -> 121
            DCS (Digital Command Signal) received while waiting for DTC
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_WHYDCNRX">
            <summary>
            EFX_WHYDCNRX -> 127
            Received unexpected DCN (Disconnect) while waiting for DCS (Digital Command Signal) / DIS (Digital Identification Signal)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNDATARX">
            <summary>
            EFX_DCNDATARX -> 128
            Unexpected DCN (Disconnect) while waiting for fax data
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNFAXRX">
            <summary>
            EFX_DCNFAXRX -> 129
            Unexpected DCN (Disconnect) while waiting for EOM (End Of Message), EOP (End Of Procedure) or MPS (Multi-page Signal)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNPHDRX">
            <summary>
            EFX_DCNPHDRX -> 130
            Unexpected DCN (Disconnect) after EOM (End Of Message) or MPS (Multi-page Signal) sequence
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNNORTNRX">
            <summary>
            EFX_DCNNORTNRX -> 131
            DCN (Disconnect) after requested retransmission
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNRRDRX">
            <summary>
            EFX_DCNRRDRX -> 132
            Unexpected DCN (Disconnect) after RR/RNR sequence
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_BUSYCHN">
            <summary>
            EFX_BUSYCHN -> 140
            Request to start fax while channel is currently busy
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_COMMERRTX">
            <summary>
            EFX_COMMERRTX -> 190
            Transmit communication error
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_COMMERRRX">
            <summary>
            EFX_COMMERRRX -> 191
            Receiver communication error
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOFAXRX">
            <summary>
            EFX_NOFAXRX -> 193
            Timed out while waiting for first line
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOEOLRX">
            <summary>
            EFX_NOEOLRX -> 194
            Timed out while waiting for EOL (End Of Line)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOCARRIERRX">
            <summary>
            EFX_NOCARRIERRX -> 195
            Lost carrier during fax receive
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NXTCMDTX">
            <summary>
            EFX_NXTCMDTX -> 197
            Timed out waiting for next send_page command from driver
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NXTCMDRX">
            <summary>
            EFX_NXTCMDRX -> 198
            Timed out waiting for next receive page command
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_ABORTCMD">
            <summary>
            EFX_ABORTCMD -> 199
            Command stopped by stop_fax firmware command
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_CHIPNORESP">
            <summary>
            EFX_CHIPNORESP -> 200
            Fax modem is not responding
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_CEDTONE">
            <summary>
            EFX_CEDTONE -> 201
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_NOWIDTHTX">
            <summary>
            EFX_NOWIDTHTX -> 202
            Remote cannot receive at this width
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_OPINTFAIL">
            <summary>
            EFX_OPINTFAIL -> 203
            Operator intervention failed
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_HDLCCARR">
            <summary>
            EFX_HDLCCARR -> 204
            Excessive HDLC carrier
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_PNSUCRX">
            <summary>
            EFX_PNSUCRX -> 205
            High speed training success not returned by modem during receive
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_ECMRNRTX">
            <summary>
            EFX_ECMRNRTX -> 210
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_ECMPHDTX">
            <summary>
            EFX_ECMPHDTX -> 211
            Invalid ECM response received from receiver
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_ECMPHDRX">
            <summary>
            EFX_ECMPHDRX -> 212
            Invalid ECM response received from transmitter
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_INVALMMRTX">
            <summary>
            EFX_INVALMMRTX -> 213
            Invalid input MMR data
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_SIGNALTIMEOUT">
            <summary>
            EFX_SIGNALTIMEOUT -> 214
            Signal timeout - no data or events received during GW session
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_DCNTIMEOUT">
            <summary>
            EFX_DCNTIMEOUT -> 215
            DCN timeout - GW session almost complete but no DCN received
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_BADIPADDRESS">
            <summary>
            EFX_BADIPADDRESS -> 216
            Bad IP address - T38 subsystem did not get remote IP address - check R4 application
            </summary>
        </member>
        <member name="F:VoiceElements.Client.PhaseEStatus.EFX_CTBUSERROR">
            <summary>
            EFX_CTBUSERROR -> 217
            CTBus error w/TDM portion of GW session - check R4 application
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxTerminationMask">
            <summary>
            A bitmap of termination reasons
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxTerminationMask.NormalCompletion">
            <summary>
            TM_FXTERM -> 0x01
            Normal completion of fax send/receive
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxTerminationMask.Polled">
            <summary>
            TM_POLLED -> 0x02
            Poll request received from transmitter
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxTerminationMask.VoiceRequest">
            <summary>
            TM_VOICEREQ -> 0x04
            Voice request (operator intervention) issued/received (not supported on DM3 boards)
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxPageBase">
            <summary>
            The base numbering system of the TIFF file
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPageBase.TF_BASE0">
            <summary>
            TF_BASE0 -> 0
            First page number is zero (TIFF/F standard)
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxPageBase.TF_BASE1">
            <summary>
            TF_BASE1 -> 1
            First page number is one
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxEcmMode">
            <summary>
            Fax session's ECM mode
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxEcmMode.ECM">
            <summary>
            DFS_ECM -> 1
            </summary>
        </member>
        <member name="F:VoiceElements.Client.FaxEcmMode.NoECM">
            <summary>
            DFS_NOECM -> 2
            </summary>
        </member>
        <member name="T:VoiceElements.Client.FaxStatus">
            <summary>
            A delegate for the FaxStatus event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.FaxStatusEventArgs">
            <summary>
            The event arguments passed in a FaxStatus event.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.FaxStatusEventArgs.#ctor(VoiceElements.Interface.FaxStatusEventArgs)">
            <summary>
            Constructor for the fax status event.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.Duration">
            <summary>
            The duration of the fax session.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.RemoteCSID">
            <summary>
            The CSID of the remote side.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxEncoding">
            <summary>
            The fax encoding scheme between the transmitter and receiver.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxPhaseDCommand">
            <summary>
            The Phase D command
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxPhaseDReply">
            <summary>
            The Phase D reply
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxWidth">
            <summary>
            The value of the negotiated width (in pixels per line) of the fax page
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxResolution">
            <summary>
            The vertical resolution of the page that is sent or received
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.ScanLines">
            <summary>
            The number of scan lines in the last page transmitted or received
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.BadScanLines">
            <summary>
            The number of bad scan lines detected and replaced in the last page transmitted or received
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxBaudRate">
            <summary>
            The transfer rate
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxState">
            <summary>
            Current state of fax channel device.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.TransferByteCount">
            <summary>
            The number of bytes transferred.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.PhaseBStatus">
            <summary>
            Phase B status bitmap
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.NegativeRetrainPages">
            <summary>
            The number of RTN pages; that is, the number of received pages for which the receiver returned an RTN
            (RetrainNegative) message to the remote transmitter
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.PhaseEStatus">
            <summary>
            Phase E information describing errors that occurred during the T.30 fax protocol
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.PagesTransferred">
            <summary>
            Number of pages transferred
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.BadPage">
            <summary>
            The fax page number (if error during processing) within the DF_IOTT structure that is being processed when an error occurs
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxTerminationMask">
            <summary>
            A bitmap of termination reasons
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.BadTag">
            <summary>
            The invalid TIFF/F tag number (if error during processing)
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxPageBase">
            <summary>
            The base numbering system of the TIFF file
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.NoTag">
            <summary>
            returns missing TIFF/F mandatory tag number
            </summary>
        </member>
        <member name="P:VoiceElements.Client.FaxStatusEventArgs.FaxEcmMode">
            <summary>
            Fax session's ECM mode
            </summary>
        </member>
        <member name="T:VoiceElements.Client.MsiChannel">
            <summary>
            Represents an Msi based channel on the Telephony Server.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.MsiChannel.PlayZipTone">
            <summary>
			Plays a special ZIP Tone to the MSI station.
		</summary><returns>
			TerminationCode		  
		</returns><remarks>
			Voice Elements Image: <img src="http://www.voiceelements.com/images/logo_voice_elements.png" alt="Voice Elements"/>

			<code>
				TerminationCode termCode = m_MsiChannel.PlayZipTone();
			</code>

		</remarks>
        </member>
        <member name="T:VoiceElements.Client.AnalogChannel">
            <summary>
            Represents an Analog based channel on the Telephony Server.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.VoiceResource">
            <summary>
            Represents a Voice Resource on the Telephony Server.  This is the primary object for media processing functions.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.ProcessCommand(VoiceElements.Interface.VPacket)">
            <summary>
            Processes Commands From the Server
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.TerminationCodeFlag(VoiceElements.Common.TerminationCode)">
            <summary>
            Returns True if the TerminationCode has the requested flag set.
            </summary>
            <param name="searchFlag"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetDigits(System.Int32,System.Int32,System.String)">
            <summary>
            Waits for one or more DTMF digits to arrive on the voice resource specified.
            </summary>
            <param name="maximumDigits">The maximum number of digits to wait for before this method returns.</param>
            <param name="maximumTime">The maximum number of seconds to wait before this method returns regardless ofg the number of digits received.</param>
            <param name="terminationDigits">A single or string of digits that will cause an input to be considered complete and cause this method to return.  Most commonly "#".</param>
            <returns>A TerminationCode that represents the termination event.  See the definition of this enum for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetDigits(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Waits for one or more DTMF digits to arrive on the voice resource specified.
            </summary>
            <param name="maximumDigits">The maximum number of digits to wait for before this method returns.</param>
            <param name="maximumTime">The maximum number of seconds to wait before this method returns regardless ofg the number of digits received.</param>
            <param name="terminationDigits">A single or string of digits that will cause an input to be considered complete and cause this method to return.  Most commonly "#".</param>
            <param name="interDigitTimeout">The maximum number of seconds this method will wait between digits before returning.</param>
            <returns>A TerminationCode that represents the termination event.  See the definition of this enum for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetDigits(System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Waits for one or more DTMF digits to arrive on the voice resource specified.
            </summary>
            <param name="maximumDigits">The maximum number of digits to wait for before this method returns.</param>
            <param name="maximumTime">The maximum number of seconds to wait before this method returns regardless ofg the number of digits received.</param>
            <param name="terminationDigits">A single or string of digits that will cause an input to be considered complete and cause this method to return.  Most commonly "#".</param>
            <param name="interDigitTimeout">The maximum number of seconds this method will wait between digits before returning.</param>
            <param name="clearDigitBuffer">If set to true, the system will clear the digit buffer before waiting, preventing digirts in the buffer to be considered by this method as input.</param>
            <returns>A TerminationCode that represents the termination event.  See the definition of this enum for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetDigits">
            <summary>
            Waits for DTMF digits to arrive on the voice resource.  For more info goto support.voiceelements.com
            </summary>
            <returns>A TerminationCode that represents the termination event.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetResponse(System.Int32,System.Int32,System.String)">
             <summary>
            	Waits for a DTMF Digit or voice response from the Speech Engine with parameters to change Voice Resource settings, including the termination digit.	
             </summary>
             <param name="maximumDigits">
            	System.Int32<para></para>
            	Description: The maximum number of digits to receive from the caller and return from the digit buffer.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see>
             </param>
             <param name="maximumTime">
            	System.Int32<para></para>
            	Description: The maximum time in seconds to wait for a response. For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see>
             </param>
             <param name="terminationDigits">
            	System.String<para></para>
            	Description: The termination digit.  This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.  This is 
             expecially helpful when getting a variable length or long string of input from a caller.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see>.
             </param>
             <returns><see cref="T:VoiceElements.Common.TerminationCode">Termination Code</see></returns>
             <remarks>
            	 This overloaded method allows you to temporarily override the current properties for MaximumDigits, MaximumTime and TerminationDigits for just this specific 'Get'.<para></para>
            	 <strong>Voice Resource Porperties vs GetResponse Override</strong><para></para>
            	 This overload is designed to override settings that you may make through properties of the voice resource (VR).  It is a consideration of style and your requirements
              of using the <see cref="T:VoiceElements.Client.VoiceResource"></see> properties, which remain set or whether you would like to specify the paramters for just on call to GetResponse.  These parameters include:<para></para>
              <list type="bullet">
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see></term>
            	        <description>The maximum number of digits that willbe accepted from the caller.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see></term>
            	        <description>The number of seconds to wait for <I>the entire expected string</I> of digits to be received.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see></term>
            	        <description>This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.</description>
            	    </item>
              </list>
             </remarks>
             <example>
            	The following code sets up the common properties for a <see cref="T:VoiceElements.Client.VoiceResource"></see> object after answering a call.
            	<code lang="cs"> 
                   public void RunScript()
                   {
                      // Answer the phone.
                      m_ChannelResource.Answer();
            
                      TerminationCode tc = TerminationCode.Normal;
            
            		  // Setup the basic settings for the Voice Resource 
                      m_VoiceResource.ClearDigitBuffer = true;
                      m_VoiceResource.TerminationDigits = "@"; // "@" or "ANY" can denote terminate a play on any digit received
                      m_VoiceResource.MaximumDigits = 11;
                      m_VoiceResource.Codec = Codec.MULAW_8Khz_8Bit;
                      m_VoiceResource.DataFormat = DataFormat.Raw;
            
            		  // Play a file
                      tc = m_VoiceResource.Play(@"Options.wav");
            
            		  // Set the digit buffer to retain digits curing the first play
                      m_VoiceResource.ClearDigitBuffer = false;
            
            		  // Play some options to the caller, which will require input back from them
                      tc = m_VoiceResource.Play(@"Options2.wav");
            
            		  // Set the max time on the voice resource and termination digit. Note that this overload will override the setting.
            		  // Alternately, you can set the resource properties and use overloads of GetResponse with less arguments and use the properties as you set them
                      m_VoiceResource.MaximumTime = 20;
                      m_VoiceResource.TerminationDigits = "#";
            
                      // Note:  In this example, the overload will temporarily override the MaximumTime from 20 to 30
                      //        And the TerminationDigits from "#" to "*";
             
                      Log.Write("Getting Resoponse", tc);
                      // Execute GetResponse
                      tc = m_VoiceResource.GetResponse(5, 30, "*");
             
                     // Insert your code here to process based on the termination code.
                   }
            	</code>
             </example>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetResponse(System.Int32,System.Int32,System.String,System.Int32)">
             <summary>
            	Waits for a DTMF Digit or voice response from the Speech Engine with parameters to change Voice Resource settings, including specifying the timeout between digits in
             a string.	
             </summary>
             <param name="maximumDigits">
            	System.Int32<para></para>
            	Description: The maximum number of digits to receive from the caller and return from the digit buffer.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see>
             </param>
             <param name="maximumTime">
            	System.Int32<para></para>
            	Description: The maximum time in seconds to wait for a response. For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see>
             </param>
             <param name="terminationDigits">
            	System.String<para></para>
            	Description: The termination digit.  This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.  This is 
             expecially helpful when getting a variable length or long string of input from a caller.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see>.
             </param>
             <param name="interDigitTimeout">
            	System.Int32<para></para>
            	Description: This is the number of seconds between digits in a string that will cause GetReponse to terminate and cosider the input of the string complete.  This can
             typically be used to allow the input of a long string to terminate without requiring the caller to hit # or another termination digit.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.InterDigitTimeout"></see>.
             </param>
             <returns><see cref="T:VoiceElements.Common.TerminationCode">Termination Code</see></returns>
             <remarks>
            	 This overloaded method allows you to temporarily override the current properties for MaximumDigits, MaximumTime, TerminationDigits and InterDigitTimeout for just this specific 'Get'.<para></para>
              <br></br>
            	 <strong>Voice Resource Porperties vs GetResponse Override</strong><para></para>
            	 This overload is designed to override settings that you may make through properties of the voice resource (VR).  It is a consideration of style and your requirements
              of using the <see cref="T:VoiceElements.Client.VoiceResource"></see> properties, which remain set or whether you would like to specify the paramters for just on call to GetResponse.  These parameters include:<para></para>
              <list type="bullet">
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see></term>
            	        <description>The maximum number of digits that willbe accepted from the caller.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see></term>
            	        <description>The number of seconds to wait for <I>the entire expected string</I> of digits to be received.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see></term>
            	        <description>This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.</description>
            	    </item>
            	    <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.InterDigitTimeout"></see></term>
            		<description>This is the number of seconds between digits in a string that will cause GetReponse to terminate and consider the input of the string complete.</description>
            	    </item>
              </list>
             </remarks>
             <example>
            	The following code sets up the common properties for a <see cref="T:VoiceElements.Client.VoiceResource"></see> object after answering a call.
            	<code lang="cs"> 
                   public void RunScript()
                   {
                      // Answer the phone.
                      m_ChannelResource.Answer();
            
                      TerminationCode tc = TerminationCode.Normal;
            
            		  // Setup the basic settings for the Voice Resource 
                      m_VoiceResource.ClearDigitBuffer = true;
                      m_VoiceResource.TerminationDigits = "@"; // "@" or "ANY" can denote terminate a play on any digit received
                      m_VoiceResource.MaximumDigits = 11;
                      m_VoiceResource.Codec = Codec.MULAW_8Khz_8Bit;
                      m_VoiceResource.DataFormat = DataFormat.Raw;
            
            		  // Play a file
                      tc = m_VoiceResource.Play(@"Options.wav");
            
            		  // Set the digit buffer to retain digits curing the first play
                      m_VoiceResource.ClearDigitBuffer = false;
            
            		  // Play some options to the caller, which will require input back from them
                      tc = m_VoiceResource.Play(@"Options2.wav");
            
            		  // Set the max time on the voice resource and termination digit. Note that this overload will override the setting.
            		  // Alternately, you can set the resource properties and use overloads of GetResponse with less arguments and use the properties as you set them
                      m_VoiceResource.MaximumTime = 20;
                      m_VoiceResource.TerminationDigits = "#";
            
                      // Note:  In this example, the overload will temporarily override the MaximumTime from 20 to 30
                      //        And the TerminationDigits from "#" to "*";
             
                      Log.Write("Getting Resoponse", tc);
                      // Execute GetResponse
                      tc = m_VoiceResource.GetResponse(5, 30, "*", 3);
             
                     // Insert your code here to process based on the termination code.
                   }
            	</code>
             </example>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetResponse(System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
             <summary>
            	Waits for a DTMF Digit or voice response from the Speech Engine with parameters to change Voice Resource settings, including specifically clearing the digit buffer.	
             </summary>
             <param name="maximumDigits">
            	System.Int32<para></para>
            	Description: The maximum number of digits to receive from the caller and return from the digit buffer.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see>
             </param>
             <param name="maximumTime">
            	System.Int32<para></para>
            	Description: The maximum time in seconds to wait for a response. For more information, see <see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see>
             </param>
             <param name="terminationDigits">
            	System.String<para></para>
            	Description: The termination digit.  This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.  This is 
             expecially helpful when getting a variable length or long string of input from a caller.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see>.
             </param>
             <param name="interDigitTimeout">
            	System.Int32<para></para>
            	Description: This is the number of seconds between digits in a string that will cause GetReponse to terminate and consider the input of the string complete.  This can
             typically be used to allow the input of a long string to terminate without requiring the caller to hit # or another termination digit.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.InterDigitTimeout"></see>.
             </param>
             <param name="clearDigitBuffer">
            	System.Boolean<para></para>
            	Description: Indicates whether or not to clear the digit buffer before beginnning the wait.  For more information, see <see cref="P:VoiceElements.Client.VoiceResource.ClearDigitBuffer"></see>.
             </param>
             <returns><see cref="T:VoiceElements.Common.TerminationCode">Termination Code</see></returns>
             <remarks>
            	 This overloaded method allows you to temporarily override the current properties for MaximumDigits, MaximumTime, TerminationDigits and ClearDigitBuffer for just this specific 'Get'.<para></para>
              <br></br>
            	 <strong>Voice Resource Porperties vs GetResponse Override</strong><para></para>
            	 This overload, by having the most parameters is designed to override settings that you may make through properties of the voice resource (VR).  It is a consideration of style and your requirements
              of using the <see cref="T:VoiceElements.Client.VoiceResource"></see> properties, which remain set or whether you would like to specify the paramters for just on call to GetResponse.  These parameters include:<para></para>
              <list type="bullet">
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see></term>
            	        <description>The maximum number of digits that willbe accepted from the caller.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see></term>
            	        <description>The number of seconds to wait for <I>the entire expected string</I> of digits to be received.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see></term>
            	        <description>This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.</description>
            	    </item>
            	    <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.InterDigitTimeout"></see></term>
            		<description>This is the number of seconds between digits in a string that will cause GetReponse to terminate and consider the input of the string complete.</description>
            	    </item>
            	    <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.ClearDigitBuffer"></see></term>
            		<description>If set to true, digits in the buffer will be purged <I>before</I> the wait for response begins.</description>
            	    </item>
              </list>
             </remarks>
             <example>
            	The following code sets up the common properties for a <see cref="T:VoiceElements.Client.VoiceResource"></see> object after answering a call.
            	<code lang="cs"> 
                   public void RunScript()
                   {
                      // Answer the phone.
                      m_ChannelResource.Answer();
            
                      TerminationCode tc = TerminationCode.Normal;
            
            		  // Setup the basic settings for the Voice Resource 
                      m_VoiceResource.ClearDigitBuffer = true;
                      m_VoiceResource.TerminationDigits = "@"; // "@" or "ANY" can denote terminate a play on any digit received
                      m_VoiceResource.MaximumDigits = 11;
                      m_VoiceResource.Codec = Codec.MULAW_8Khz_8Bit;
                      m_VoiceResource.DataFormat = DataFormat.Raw;
            
            		  // Play a file
                      tc = m_VoiceResource.Play(@"Options.wav");
            
            		  // Set the digit buffer to retain digits curing the first play
                      m_VoiceResource.ClearDigitBuffer = false;
            
            		  // Play some options to the caller, which will require input back from them
                      tc = m_VoiceResource.Play(@"Options2.wav");
            
            		  // Set the max time on the voice resource and termination digit. Note that this overload will override the settings.
            		  // Alternately, you can set the resource properties and use overloads of GetResponse with less arguments and use the properties as you set them
                      m_VoiceResource.MaximumTime = 20;
                      m_VoiceResource.TerminationDigits = "#";
            
                      // Note:  In this example, the overload will temporarily override the MaximumTime from 20 to 30
                      //        And the TerminationDigits from "#" to "*";
             
                      Log.Write("Getting Resoponse", tc);
                      // Execute GetResponse
                      tc = m_VoiceResource.GetResponse(5, 30, "*", 3, false);
             
                     // Insert your code here to process based on the termination code.
                   }
            	</code>
             </example>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetResponse">
             <summary>
            	Waits for a DTMF Digit or voice response from the Speech Engine using all current settings for the Voice Resource, and therefore has no parameters.	
             </summary>
             <returns><see cref="T:VoiceElements.Common.TerminationCode">Termination Code</see></returns>
             <remarks>
            	 This method does not set any of the required <see cref="T:VoiceElements.Client.VoiceResource"></see> properties.  Whatever has been set in the VR properties will be used to determine the behavior of the GetResponse call.
              See sample code below.<para></para>
              <br></br>
            	 <strong>Voice Resource Properties and Overloads</strong><para></para>
            	 This method has 3 overloads allowing you to set specific <see cref="T:VoiceElements.Client.VoiceResource"></see> properties to control behavior.  If you choose to use this method and not one of the overloads,
             keep in mind that you have set the <see cref="T:VoiceElements.Client.VoiceResource"></see> properties before calling GetResponse.  Consider <see cref="M:VoiceElements.Client.VoiceResource.GetResponse">GetResponse Overloads</see>
             before implementing.  The relevant properties you will need to set include:<para></para>
              <list type="bullet">
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumDigits"></see></term>
            	        <description>The maximum number of digits that willbe accepted from the caller.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.MaximumTime"></see></term>
            	        <description>The number of seconds to wait for <I>the entire expected string</I> of digits to be received.</description>
                 </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.TerminationDigits"></see></term>
            	        <description>This digit, like a pound sign (#) would stop the response from waiting for more digits in a string.</description>
            	    </item>
            	    <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.InterDigitTimeout"></see></term>
            		<description>This is the number of seconds between digits in a string that will cause GetReponse to terminate and consider the input of the string complete.</description>
            	    </item>
                 <item>
            	        <term><see cref="P:VoiceElements.Client.VoiceResource.ClearDigitBuffer"></see></term>
            		<description>If set to true, digits in the buffer will be purged <I>before</I> the wait for response begins.</description>
            	    </item>
              </list>
             </remarks>
             <example>
            	The following code sets up the common properties for a <see cref="T:VoiceElements.Client.VoiceResource"></see> object after answering a call and executes a GetResponse at the end.
            	<code lang="cs"> 
                   public void RunScript()
                   {
                      // Answer the phone.
                      m_ChannelResource.Answer();
            
                      TerminationCode tc = TerminationCode.Normal;
            
            		  // Setup the basic settings for the Voice Resource 
                      m_VoiceResource.ClearDigitBuffer = true;
                      m_VoiceResource.TerminationDigits = "@"; // "@" or "ANY" can denote terminate a play on any digit received
                      m_VoiceResource.MaximumDigits = 11;
                      m_VoiceResource.Codec = Codec.MULAW_8Khz_8Bit;
                      m_VoiceResource.DataFormat = DataFormat.Raw;
            
            		  // Play a file
                      tc = m_VoiceResource.Play(@"Options.wav");
            
            		  // Set the digit buffer to retain digits curing the first play
                      m_VoiceResource.ClearDigitBuffer = false;
            
            		  // Play some options to the caller, which will require input back from them
                      tc = m_VoiceResource.Play(@"Options2.wav");
            
            		  // Set the max time on the voice resource and termination digit.
            		  // Alternately, you can use overloads of GetResponse with parameters to specifically set these.
                      m_VoiceResource.MaximumTime = 20;
                      m_VoiceResource.TerminationDigits = "#";
             
                      Log.Write("Getting Resoponse", tc);
                      // Execute GetResponse with all of the above Voice Resource behaviors set.
                      tc = m_VoiceResource.GetResponse();
             
                     // Insert your code here to process based on the termination code.
                   }
            	</code>
             </example>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.GetSilence">
            <summary>
            Waits for a specified period of silence before returning to your code. 
            This is useful when waiting for an answering machine to finish playing it's greeting.
            </summary>
            <returns>TerminationCode <see cref="P:VoiceElements.Client.VoiceResource.TerminationCode"/></returns>
            <exception cref="T:VoiceElements.Common.HangupException"></exception>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Play(System.String)">
            <summary>
            Plays the specified file.
            </summary>
            <param name="filename">The path and filename you would like to play.</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Play(System.String[])">
            <summary>
            Plays a sequence of files, provided each file plays to completion.
            </summary>
            <param name="filenames">An array of which each element is a path and filename you would like to play.</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum definition for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayDate(System.DateTime)">
            <summary>
            Plays a date over the voice resource.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayVap(System.Int32)">
            <summary>
            Plays a single segment of the current Vap File.
            </summary>
            <param name="segment"></param>
            <returns>TerminationCode is returned by this function.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayVap(System.Int32[])">
            <!-- No matching elements were found for the following include tag --><include file="ClientDocumentation\VoiceResourceDocs.xml" path="VoiceResourceDocs/VoiceResourceProperty[@name=&quot;PlayVap&quot;]/*"/>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayVap(System.String)">
            <summary>
            Plays a single segment of the current Vap File using the VapMap entry specified.
            </summary>
            <param name="vapMapEntry"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayVap(System.String[])">
            <summary>
            Plays multiple segments of the current Vap file using the VapMap entries specified.
            </summary>
            <param name="vapMapEntries"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayNumber(System.String)">
            <summary>
            Plays the specified string as a number.  For example "12.5" is spoken as "twelve point five"
            </summary>
            <param name="numberString">The string to play as a number.</param>
            <returns>TerminationCode</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayTouchTones(System.String)">
            <summary>
            Plays DTMF Digits.
            </summary>
            <param name="touchTones"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Play(System.Byte[])">
            <summary>
            Plays the specified byte array.
            </summary>
            <param name="buffer">The buffer containing the data to play.</param>
            <returns>TerminationCode</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Record(System.String)">
            <summary>
            Records audio on the voice resource to the given file name.
            </summary>
            <param name="filename">The file to record the data to.</param>
            <returns>TerminationCode</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.RecordConverstation(System.String,VoiceElements.Client.RoutableResource,VoiceElements.Client.RoutableResource)">
            <summary>
            Records two routable resources, summing them together into the same file.  You can specify channels and/or a voice resources.
            </summary>
            <param name="filename"></param>
            <param name="resource1"></param>
            <param name="resource2"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.RecordConverstation(System.Int32,System.Byte[]@,VoiceElements.Client.RoutableResource,VoiceElements.Client.RoutableResource)">
            <summary>
            Records two routable resources, summing them together into a buffer.  You can specify channels and/or a voice resources.
            </summary>
            <param name="size"></param>
            <param name="buffer"></param>
            <param name="resource1"></param>
            <param name="resource2"></param>
            <returns></returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayTone(System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays a tone at the desired frequency and amplitude for the requested duration.
            </summary>
            <param name="frequency">The frequency you would like the tone to have.</param>
            <param name="amplitude">The amplitude or volume of the tone.</param>
            <param name="duration">The duration in millisecond you would like the tone to play.</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum definition for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayTone(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Plays two mixed tones at the desired frequency and amplitude for the requested duration.
            </summary>
            <param name="frequency1">The frequency you would like the first tone to be mixed tone to have.</param>
            <param name="amplitude1">The amplitude or volume of the first tone.</param>
            <param name="frequency2">The frequency you would like the second tone to be mixed tone to have.</param>
            <param name="amplitude2">The amplitude or volume of the second tone.</param>
            <param name="duration">The duration in millisecond you would like the tone to play.</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum definition for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayTTS(System.String)">
            <summary>
            Plays the text specified using the Text-To-Speech engine.
            </summary>
            <param name="ttsString">The string you would like the TTS engine to speak. I.e. "Hello world"</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum definition for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.PlayTTS(System.String,System.String)">
            <summary>
            Plays the text specified using the Text-To-Speech engine and using a specific voice.
            </summary>
            <param name="ttsString">The string you would like the TTS engine to speak. I.e. "Hello world"</param>
            <param name="voice">The exact string name of the voice you would like to use. I.e. "Microsoft Sam"</param>
            <returns>A termination code indicating how the play ended.  See the termination code enum definition for details.</returns>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Stop">
            <summary>
            Stops any current activity on the voice resource, such as a play or a record.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.WipeDigitBuffer">
            <summary>
            Empties the digit buffer.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.BeepDetectionStart">
            <summary>
            Starts Beep Detection
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.BeepDetectionStop">
            <summary>
            Stops Beep Detection
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.BeepDetectionRestart">
            <summary>
            Restarts Beep Detection 
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.TddDetectionStart">
            <summary>
            Starts TDD Detection
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.TddDetectionStop">
            <summary>
            Stops TDD Detection
            </summary>
        </member>
        <member name="M:VoiceElements.Client.VoiceResource.Dispose(System.Boolean)">
            <summary>
            Disposes this Voice Resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:VoiceElements.Client.VoiceResource.Digit">
            <summary>
            This event fires when a digit is detected on the voice resource.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.EnableDigitEvents">
            <summary>
            Enables the Digit Events
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BytesPlayed">
            <summary>
            Returns the number of bytes played from the last play.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.DigitBuffer">
            <summary>
            Holds the digit buffer of digits from the last GetDigits().
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BytesRecorded">
            <summary>
            Returns the number of bytes recorded from the last record.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.TalkTime">
            <summary>
            Returns the number of seconds of talk time from the last record.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.TerminationCode">
            <summary>
            Returns the Termination code from the last voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.MaximumDigits">
            <summary>
            Gets or Sets the maximum number of digits to use for the next voice function..
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.MaximumTime">
            <summary>
            Gets or Sets the maximum time to use for the next voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.MaximumSilence">
            <summary>
            Gets or Sets the maximum silence to use for the next voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.InterDigitTimeout">
            <summary>
            Gets or Sets the inter digit time out to use for the next voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.InterDigitTimeoutStartsAfterFirstDigit">
            <summary>
            Gets or sets a value to determine when the inter digit timer starts; either immediately or after the first digit is pressed.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.TerminationDigits">
            <summary>
            Gets or Sets the termination digits to use for the next voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.ClearDigitBuffer">
            <summary>
            Gets or Sets the flag that tells the system weather or not to clear the digit buffer before executing the the next voice function.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.Codec">
            <summary>
            Gets or Sets the codec.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VapCodec">
            <summary>
            Gets or Sets the Vap codec.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.DataFormat">
            <summary>
            Gets or Sets the DataFormat.  The Default is Wave.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VapFile">
            <summary>
            Gets or Sets the VapFile name.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VapMapFile">
            <summary>
            Gets or Sets the VapMapFile name.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.FormatSpoken">
            <summary>
            The format spoken when playing dates and numbers.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.DetectBargeIn">
            <summary>
            When set to true, files played will return a TerminationCode of BargeIn if voice activity is detected during the DetectBargeInWindow time.
            This only applies to CSP enabled voice resources.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.DetectBargeInTimeout">
            <summary>
            The maximum amount of time you will allow a barge-in to trigger the stopping of a Play function.  
            This only applies to CSP enabled voice resources.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VoiceRecognitionEnabled">
            <summary>
            When set to true, this causes all subsequent Play() and PlayTTS() methods to perform voice recognition.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VoiceRecognitionGrammarFile">
            <summary>
            Specifies the grammar file to use with the voice recognition operation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VoiceRecognitionReturnedWord">
            <summary>
            The returned word from the last voice recognition operation.
            <p/>UML Diagram: <img src="www.voiceelements.com/DavWWWRoot/images/logo_voice_elements.png" alt="UML Diagram" />
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VoiceRecognitionScore">
            <summary>
            The score returned from the engine that specifies how the last voice recognition operation was scored.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.VoiceRecognitionEndOfSpeechDelay">
            <summary>
            Sets the amount of time necessary to trigger end of speech detection.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionEnabled">
            <summary>
            When set to true, this causes all subsequent Play() and PlayTTS() methods to perform speech recognition.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionGrammarFile">
            <summary>
            Specifies the grammar file to use with the speech recognition operation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionScore">
            <summary>
            The score returned from the engine that specifies how the last speech recognition operation was scored.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionEndOfSpeechDelay">
            <summary>
            Sets the amount of time necessary to trigger end of speech detection.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionComfortFile">
            <summary>
            Specifies the comfort file to use with the speech recognition operation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionComfortStart">
            <summary>
            Specifies, in milliseconds, how soon to start the Comfort File after the bargein.  A setting of 0 means to wait until the end of speech is detected.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.SpeechRecognitionMode">
            <summary>
            Specifies if SpeechRecognition spans a single play or multiple plays.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.StartingOffset">
            <summary>
            The starting position in the file from which the next play should begin.  This property is reset after each invocation.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.RecordWithBeep">
            <summary>
            Sets the voice resource to play a short beep before it begins recording.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionFrequencyRangeLowHz">
            <summary>
            The lowest frequency the beep detector will attempt to isolate.  Default 600Hz.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionFrequencyRangeHighHz">
            <summary>
            The highest frequency the beep detector will attempt to isolate.  Default 1800Hz.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionPercentOfEnergy">
            <summary>
            The percentage of energy that is contained within the frequency bin as compared to the overall energy.  Default 0.90f 
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionMinimumRequiredDb">
            <summary>
            The minimum required energy in decibels for a packet to be examined.  Default -38.0f  Raising this value will eliminate quieter tones.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionTimeOnToTriggerMs">
            <summary>
            This is the total time the frequency must be registered before the system qualifies it as a beep.  Default 200ms
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionMaximumTimeMs">
            <summary>
            This is the maximum time the system will listen for a beep.  Beep detection will stop after this interval.  Default = 60000ms
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionDebouncerOn">
            <summary>
            This is the required number of samples (each 10ms) that are required for the tone to be considered "on".  Default = 4 samples
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionDebouncerOff">
            <summary>
            This is the required number of samples (each 10ms) that are required for the tone to be considered "off".  Default = 4 samples
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionToneOnEnergyDeviationDb">
            <summary>
            The allowable deviation of the tone's loudness in decibels.  If the tone starts at -15db it must stay at this level +/- this value.  The default is 2.0 db.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionToneOnFrequencyDeviation">
            <summary>
            The allowable deviation of the tone's frequency in hertz. If the tone starts at 600hz it must stay at this frequency +/- this value.  The default is 25 Hz.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionShortToneMs">
            <summary>
            The length of the shortest tone you wish to detect.  For shorter tones, the tone must be immediately followed by silence.  The default is 120ms.
            </summary>
            
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionShortToneSilenceTriggerMs">
            <summary>
            The amount of required silence after a short tone goes to silence.  The default is 40ms.
            </summary>
        </member>
        <member name="P:VoiceElements.Client.VoiceResource.BeepDetectionMetaData">
            <summary>
            When the server is recording beep detection, this allows you to add additional information to the filename that is create.
            Be sure to only use characters that are permissable within filenames.
            </summary>
        </member>
        <member name="T:VoiceElements.Client.Digit">
            <summary>
            A delegate for the Digit event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:VoiceElements.Client.DigitEventArgs">
            <summary>
            The event arguments passed in a Digit event.
            </summary>
        </member>
        <member name="M:VoiceElements.Client.DigitEventArgs.#ctor(System.Char)">
            <summary>
            Constructor for the digit event.
            </summary>
            <param name="digit"></param>
        </member>
        <member name="P:VoiceElements.Client.DigitEventArgs.Digit">
            <summary>
            The digit that was pressed.
            </summary>
        </member>
    </members>
</doc>
